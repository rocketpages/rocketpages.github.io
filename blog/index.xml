<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Kevin Webber</title>
    <link>http://rocketpages.github.io/blog/index.xml</link>
    <description>Recent content in Blog on Kevin Webber</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 May 2017 21:54:43 -0400</lastBuildDate>
    <atom:link href="http://rocketpages.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>How to Start a Consulting Company</title>
      <link>http://rocketpages.github.io/how-to-start-a-consulting-company</link>
      <pubDate>Mon, 01 May 2017 21:54:43 -0400</pubDate>
      
      <guid>http://rocketpages.github.io/how-to-start-a-consulting-company</guid>
      <description>

&lt;p&gt;Last fall I decided to leave &lt;a href=&#34;http://lightbend.com&#34;&gt;Lightbend&lt;/a&gt; to pursue a dream that I&amp;rsquo;ve had for the better part of a decade: starting a consulting company. So, in late 2016, RedElastic was born.&lt;/p&gt;

&lt;p&gt;Starting RedElastic is the hardest, most rewarding, and most exciting things I&amp;rsquo;ve done in my life. Every experience that I&amp;rsquo;ve had up until now, both professionally and personally, has lead up to the point that starting RedElastic wasn&amp;rsquo;t even up for debate. I wouldn&amp;rsquo;t have slept at night if I didn&amp;rsquo;t make it happen.&lt;/p&gt;

&lt;p&gt;The support from friends and colleagues has been overwhelming, which means a lot to me. Some of those friends have asked me for advice on how to start their own consulting company, so I decided to capture some thoughts here as a way to share what I&amp;rsquo;ve learned.&lt;/p&gt;

&lt;h2 id=&#34;1-don-t-start-a-consulting-company&#34;&gt;1. Don&amp;rsquo;t start a consulting company&lt;/h2&gt;

&lt;p&gt;My best advice to anyone thinking of starting a consulting company is not to start a consulting company.&lt;/p&gt;

&lt;p&gt;Anyone who has the mix of skills required to start a consulting company can find a much higher paying job as an executive, director, or analyst at a larger consulting firm with less hours and &lt;em&gt;far&lt;/em&gt; less stress. Working for a larger company will free you up from the administrative details I will cover below.&lt;/p&gt;

&lt;p&gt;In my own case, I could have happily stayed at &lt;a href=&#34;http://lightbend.com&#34;&gt;Lightbend&lt;/a&gt;, a company that I not only loved working for but that I was previously a customer of. Before deciding to take on the level of commitment required to be successful in consulting you need to fully appreciate the other opportunities you&amp;rsquo;re passing up.&lt;/p&gt;

&lt;h2 id=&#34;2-know-your-why&#34;&gt;2. Know your &lt;em&gt;&amp;ldquo;why&amp;rdquo;&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;Consulting in the true sense of the word is rare. Advisory-level consulting only &lt;em&gt;begins&lt;/em&gt; with performing as a subject-matter expert for your clients. People are entrusting you with their dreams and counting on you to deliver; it&amp;rsquo;s not something to take lightly, it&amp;rsquo;s servant leadership in the truest sense of the word. You must bring every ounce of empathy, compassion, and caring for the dreams of others with you to work every single day. Your success as a consultant is not gained through billable hours, billable hours keep you fed and the lights on in your office. Genuine success as a consultant is only realized when you unlock the potential in others.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s why, for the most part, there are very few consulting firms. Most &amp;ldquo;consulting&amp;rdquo; is better called &lt;em&gt;staff augmentation&lt;/em&gt; or &lt;em&gt;digital studio outsourcing&lt;/em&gt;.&lt;/p&gt;

&lt;table class=&#34;uk-table&#34;&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Staff augmentation firms&lt;/td&gt;
            &lt;td&gt;Staff augmentation firms act as an on-tap bench for their clients. They&#39;re especially useful for large corporations who are feeling out &#34;skunkworks&#34; projects with new technologies that may never make it to production. Clients never deal directly with A-list talent through the big firms unless they&#39;re a Fortune 50 and have an 8-figure budget, so they&#39;ll need their own A-team to provide mentorship and quality control throughout an engagement. Augmentation firms are a &#34;lever&#34; to accelerate productivity, but they can&#39;t live in isolation. In many ways this is becoming a broken model as companies are able to do significantly more with significantly less; for example, WhatsApp had only 35 developers and supported 450 million users when it was acquired by Facebook for $19 billion dollars.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Digital studios&lt;/td&gt;
            &lt;td&gt;Digital studios are somewhere between consulting firms and staff augmentation firms. They tend to have a small handful of senior-level employees who nurture clients during presales and the early phase of crafting a solution, while offering closer to a turn-key model of service from design through delivery. The business model of a digital studio requires moving as much work as possible to more junior staff members so the margin on billable rates is always at its highest. For this reason, peak happiness with a digital studio often begins and ends somewhere near the beginning of a project. Digital studios sometimes compete with the large augmentation firms on rates, but studios bring extra capabilities to the table such as design and marketing. The boundaries between the two are blurring, but can usually be determined based on the percentage of work that&#39;s off-shored versus done locally. A top-shelf studio competes on value, so they can charge a higher rate and provide top-notch local talent. A hybrid augmentation/studio competes on price, so therefore has to move delivery work offshore while providing local relationship management.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Consulting firms&lt;/td&gt;
            &lt;td&gt;Advisory-level consulting firms are typically small agencies staffed by top-tier talent with pre-established reputations in the industry. The rates at consulting firms are high, the value is high, and the demand is typically higher than the supply; experts in highly sought after domains such as AI, machine learning, InfoSec, and distributed systems can bill out at rates of anywhere from $2000-4000 USD per day, sometimes significantly higher depending on the nature and duration of the project. It&#39;s rare for advisory-level consulting firms to complete directly with staff augmentation firms or digital studios. On the contrary, consulting firms often work closely with other consulting firms, digital studios, and staff augmentation firms; for instance, if a prospective client of a consulting firm doesn&#39;t have expert-level advisors available in-house to provide leadership and oversight of a staff augmentation firm, a consultant can be brought in to provide checks-and-balances to a project.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;If you plan to compete in the world of consulting, you&amp;rsquo;ll need to serve your clients at the highest levels of expectations. You&amp;rsquo;ll also need to work at such a high-level of skill and trust that other consulting firms are comfortable to recommend you to their clients.&lt;/p&gt;

&lt;p&gt;Are you cut out to deal with sky-high expectations every single day you wake up? One of the best pieces of advice I was given in my career was from an early manager I had at CIBC:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It&amp;rsquo;s one thing to get excited about your own vision, but can you become excited about &lt;em&gt;my&lt;/em&gt; vision? If you&amp;rsquo;re able to embrace the dreams of others as passionately as your own, you&amp;rsquo;re ready to become a mentor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Before that conversation I was able to demonstrate a huge amount of passion for my own ideas but I had a harder time getting behind the ideas of others. There&amp;rsquo;s nothing wrong with that! Often times product companies are best lead by founders who stick to their guns and disregard the advice of others by protecting their singular vision. The essence of consulting is the complete opposite. You must embrace your client&amp;rsquo;s vision while lending your expertise in order to make sure they&amp;rsquo;re completely successful.&lt;/p&gt;

&lt;p&gt;Digging a little deeper, you need to understand why you want to enter a business domain to serve others.&lt;/p&gt;

&lt;p&gt;My own &lt;em&gt;&amp;ldquo;why?&amp;rdquo;&lt;/em&gt; is simple:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I&amp;rsquo;m passionate about building a consulting company that I would have wanted to hire as a customer, and&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;m passionate about building a consulting company that I would have wanted to work for.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;3-embrace-the-unknown&#34;&gt;3. Embrace the unknown&lt;/h2&gt;

&lt;p&gt;The stress of sales, marketing, and business development, along with the pressure of delivering technical solutions at the highest levels of excellence, is far from trivial.&lt;/p&gt;

&lt;p&gt;Everyone who has asked me for advice on starting their own company is a technical expert. Working in a technical capacity is &lt;em&gt;consistent&lt;/em&gt;: for instance, as an expert technologist, I have confidence that if I put in &lt;code&gt;X&lt;/code&gt; number of hours of hard work I will achieve the result of &lt;code&gt;Y&lt;/code&gt;, and the result will be proportional to my efforts. I will end the day (likely) feeling proud of my tangible accomplishments and inspired to build new things tomorrow.&lt;/p&gt;

&lt;p&gt;As an entrepreneur you&amp;rsquo;ll be doing a lot of work that has no immediate correlation between effort and results. Sales and marketing is more like chaos theory, &lt;em&gt;&amp;ldquo;flap your wings today and it may rain in New York next year&amp;rdquo;&lt;/em&gt;. Spending a full day on marketing materials may yield a positive result, such as a viral blog post, or it may yield nothing more than the sound of crickets. You may put together an incredible sales presentation but ultimately lose an opportunity to a competitor because they played hockey together in high school. You may make the right decision for a client that involves withdrawing your interest from a high-paying contract because over the long term you&amp;rsquo;re simply not the right firm to deliver the work.&lt;/p&gt;

&lt;h2 id=&#34;4-master-the-basics&#34;&gt;4. Master the basics&lt;/h2&gt;

&lt;p&gt;There are a handful of skills that anyone leading or working in a consulting firm needs to have. This applies to everyone:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Have expert-level technical skills to offer.&lt;/strong&gt; You&amp;rsquo;re at the top of your game. Others in the industry respect your opinion and abilities. This is arguably the starting point. If you don&amp;rsquo;t come from a technical background, you&amp;rsquo;ll need to find a co-founder, partner, confidant, and friend who brings this capability into the company. Non-technical staff will need to learn how to position technology to their clients. (Some of the sales people I&amp;rsquo;ve worked with are deeply technical and can easily rock a high-level technical presentation.)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Listen first and speak second.&lt;/strong&gt; The core competency of consulting is &lt;em&gt;listening&lt;/em&gt;. I&amp;rsquo;m naturally a chatty person, so active listening is something I&amp;rsquo;ve worked at for years. There&amp;rsquo;s nothing wrong with processing the ideas of others before formulating an opinion. If you need to think about something overnight, be clear and confident that you need time to prepare. Set expectations clearly and come back prepared. There&amp;rsquo;s a balance here; if you &lt;em&gt;always&lt;/em&gt; need a weekend to prepare before answering a question, it&amp;rsquo;s a clear sign that you should hone your craft before attempting this adventure.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Know your limits.&lt;/strong&gt; Expertise doesn&amp;rsquo;t mean knowing &lt;em&gt;everything&lt;/em&gt;. Learn the delta between your abilities and your gaps and get to know that space well. Consulting requires understanding when you can deliver on a requirement in-house, or when a client has a requirement that&amp;rsquo;s not in your wheelhouse. You gain trust by promising only what you&amp;rsquo;re able to deliver. As a counterpoint, if you have knowledge in the general domain, you can be confident in your ability to understand the ideas quickly and find an optimum solution. You&amp;rsquo;ll have faith in your experience in unknown circumstances if you already have expert-level skills. The takeaway is that &amp;ldquo;fake it until you make it&amp;rdquo; does not apply to consulting.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Make alliances.&lt;/strong&gt; You will be successful with strong alliances. For instance, I&amp;rsquo;m not a machine learning expert, but I can refer experts in the field who I trust enough to stake my reputation on &lt;em&gt;their&lt;/em&gt; ability to deliver. The reverse also happens; RedElastic has not yet done any significant outbound sales yet. All of our work has come through referrals.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;5-become-well-rounded&#34;&gt;5. Become well-rounded&lt;/h2&gt;

&lt;p&gt;In 2013 I finished my biggest project to date, which was helping to successfully deliver a new reactive platform for Walmart Canada on behalf of Nurun (well before Nurun was acquired by Razorfish, well before Razorfish was acquired by Publicis, and well before Publicis merged Sapient and Razorfish together &amp;ndash; the Nurun Toronto that exists today is a totally different team).&lt;/p&gt;

&lt;p&gt;I was on the Walmart project from the technical selection to delivery, wrote the first line of code for the web-tier, worked day and night through launch, and ultimately helped to deliver the project successfully. I had some amazing mentors along the way who believed in my opinions such as Bob Seehra, Mark Aning, and Ankur Mathur. I learned a tremendous amount from all of them; not only technical skills, but also the skill of articulating solutions to some of the largest organizations in the world. I was also fortunate to learn from Simon Rodrigue, former SVP of eCommerce at Walmart Canada. We didn&amp;rsquo;t spend a huge amount of time together but I paid attention to absolutely everything he shared &amp;ndash; not only &lt;em&gt;what&lt;/em&gt; was shared but &lt;em&gt;how&lt;/em&gt; it was shared. This gave me genuine insight into what the value of consulting is and how it intersects with a client&amp;rsquo;s internal capabilities.&lt;/p&gt;

&lt;p&gt;Delivering an optimum solution to a client requires understanding client&amp;rsquo;s requirements at &lt;em&gt;all levels&lt;/em&gt; over the entire lifecycle of a deliverable. Case in point: the first line of code anyone paid me for was written in COBOL, and rumour has it that it&amp;rsquo;s still in production today. What you leave behind needs to last. I worry that much of the code that I see today is throw-away. Writing throw-away code is a very low-leverage activity. The goal should be that everything you deliver will evolve over time, and it will only evolve if it&amp;rsquo;s both valuable and comprehensible. When delivering a solution for a client, keep in mind that:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code always lives longer than you think it will&lt;/li&gt;
&lt;li&gt;Code will be read many more times than it will be written&lt;/li&gt;
&lt;li&gt;Existing code will be used as a blueprint for future code&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What you deliver will have an impact well beyond your time on site. Optimize for the people reading your code, not for yourself as you write it. Building the most beautiful and optimal technical solution means very little if a client can&amp;rsquo;t find talent to support it in five years because you selected an exotic language or framework. Everything must be taken into consideration. Treat everyone&amp;rsquo;s money as if it were your own.&lt;/p&gt;

&lt;p&gt;Being well rounded means knowing when to be opinionated and when to compromise.&lt;/p&gt;

&lt;p&gt;I was tempted to use the momentum from the Walmart project to launch my firm, but I decided that I had more to learn. Though I was &lt;em&gt;technically&lt;/em&gt; well-rounded, I needed other skills in my wheelhouse that would take years to develop.&lt;/p&gt;

&lt;h3 id=&#34;develop-your-sales-iq&#34;&gt;Develop your sales IQ&lt;/h3&gt;

&lt;p&gt;Many of the open source technologies that developers love are funded through the efforts of sales teams at open source companies. Sales teams work &lt;em&gt;hard&lt;/em&gt; and they absolutely deserve more credit for moving the open source community forward. Everyone from a Junior Developer to the CEO of a large enterprise should have a keen sense of how their efforts fit into the goals of their business, and sales is the cornerstone of business.&lt;/p&gt;

&lt;div class=&#34;uk-child-width-expand@s&#34; uk-grid&gt;
    &lt;div&gt;
        &lt;p&gt;A big part of my role at Lightbend was supporting the Lightbend sales team. Every single sales meeting that I participated in over the years was critical training for starting a business. Not only did those experiences better teach me how to define the business value of technology, but they gave me a better understanding of the entire open source software industry in general. If you don&#39;t have any hands-on sales experience, I highly recommend spending a few years in a sales engineer role before attempting to start your own business.&lt;/p&gt;
        &lt;p&gt;There&#39;s no way to read about sales to understand how it works; you have to get out on the road and embrace the grind. You can&#39;t teach what it&#39;s like to go to sales meetings all day, then present at a Meetup, then drive overnight from Houston to Dallas through a rainstorm with someone who can barely see at night (Powell, I love you, but holy hell you need glasses). A sales meeting in open source software is vastly different than a sales meeting in insurance; it might involve walking into an unfamiliar building to have 30 strangers waiting for you, and within a few minutes you&#39;re in front of them on a whiteboard to dive into the deepest bits of an architectural approach or programming language.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;uk-inline&#34;&gt;
            &lt;img src=&#34;http://res.cloudinary.com/dxqjvpa0t/image/upload/v1493920652/DSC02927_ajii0c.png&#34; alt=&#34;&#34;&gt;
            &lt;div class=&#34;uk-overlay uk-light uk-position-bottom&#34;&gt;
                &lt;p&gt;Hanging out with John Mayerhofer in 2015; learning everything I can.&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;    
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Sales encompasses every aspect of building positive business relationships, from technical excellence like presenting a detailed delivery plan, to logistics like ordering lunch. Positive relationships are not forged on dollars and cents, they only develop when people are able to achieve mutual goals together in a caring and trustworthy way. Anyone who thinks sales is only about hustling deals is doing business with the wrong companies.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Don&amp;rsquo;t fuck up the salad!&amp;rdquo; &amp;ndash; Jason Goodwin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;understand-the-role-of-marketing&#34;&gt;Understand the role of marketing&lt;/h3&gt;

&lt;p&gt;One of the most influential experiences in my career was attending QCon in New York back in 2012. That&amp;rsquo;s when I came across two new subjects that would change my career:&lt;/p&gt;

&lt;dl class=&#34;uk-description-list&#34;&gt;
    &lt;dt&gt;The Play Framework&lt;/dt&gt;
    &lt;dd&gt;I was hunting for a solution that I could recommend to clients as an alternative to my go-to recommendations at the time like JEE, Spring, Ruby on Rails, and Grails. While some of those are fine choices, for web-facing systems that receive millions of requests per minute are a whole different ballgame. I was so impressed with Play that not only did I use it for the Walmart Canada project, but I also wound up becoming an advocate at Lightbend. Sadek Drobi gave a detailed talk about Play at QCon, and while much of it was over my head at the time, thanks to the magic of WiFi I downloaded Play and began hacking before I even left his talk.&lt;/dd&gt;
    &lt;dt&gt;The Business Value of Joy&lt;/dt&gt;
    &lt;dd&gt;I heard Richard Sheridan of Menlo Innovations gave a talk about the &#34;business value of joy&#34;, and it was a transformative experience both professionally and personally. I realized that it&#39;s possible to start a company that&#39;s both profitable and also a joy to work with and do business with. This was the moment when I knew that I would start a consulting company in Canada.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Without marketing, I would never have had those transformative experiences. Professionals from all over North America took time out of their schedule to attend QCon to share their experience with others. Sure, there&amp;rsquo;s an upside for presenters &amp;ndash; an inspirational talk is a powerful business development tool &amp;ndash; but the upside is mutual.&lt;/p&gt;

&lt;p&gt;Understanding how marketing affects your company, your opportunities, and the success of future clients is critical. Is your consulting company just about making money, or do you have inspirational experiences to share with the community? Are you willing to invest in open source software, not only releasing code but also sharing your knowledge and experience?&lt;/p&gt;

&lt;p&gt;Marketing is &lt;strong&gt;not&lt;/strong&gt; advertising. Marketing done right should give back to the community more than it takes from the community. The delta between give and take is part of the contribution that your company makes to open source software.&lt;/p&gt;

&lt;h3 id=&#34;practice-public-speaking&#34;&gt;Practice public speaking&lt;/h3&gt;

&lt;p&gt;Before joining Lightbend I had never delivered even a single Meetup talk. It took me years of practice before becoming comfortable in front of a large audience. If you&amp;rsquo;re serious about developing your public speaking skills, start presenting at local Meetups.&lt;/p&gt;

&lt;p&gt;Most importantly, ask people for feedback after every single talk. Sometimes it&amp;rsquo;s amazing at how different your own opinion of your talk compared to how others experienced it. My very first conference talk was at GeeCON in Prague, and afterwards I asked Konrad Malawski of Akka fame for feedback. He shared the good, the bad, and the ugly, and I incorporated his advice into all of my future talks. If you&amp;rsquo;re not willing to be humbled you&amp;rsquo;ll never develop a connection with your audience, which defeats the entire purpose of speaking; after all, do you speak for yourself, or for others?&lt;/p&gt;

&lt;h3 id=&#34;bringing-it-all-together&#34;&gt;Bringing it all together&lt;/h3&gt;

&lt;p&gt;Once you have an idea of what you want to accomplish with your sales and marketing efforts, you need to tie them together and understand how they fit into the big picture.&lt;/p&gt;

&lt;div class=&#34;uk-grid-match uk-child-width-expand@s&#34; uk-grid&gt;
    &lt;div&gt;
        &lt;div class=&#34;uk-padding uk-background-secondary uk-light&#34;&gt;
            &lt;h4&gt;Marketing Communications&lt;/h4&gt;
            &lt;p&gt;Marketing Communications involves content creation, presenting at conferences and meetups, and anything else that generates brand awareness in a positive way.&lt;/p&gt;
            &lt;h4&gt;Sales&lt;/h4&gt;
            &lt;p&gt;The sales process involves working with a prospective client to determine a mutual fit between requirements, capabilities, timing, and budget. If a fit doesn&#39;t exist, either you or your prospective client will need to find alternatives (such as recommending another firm).&lt;/p&gt;
            &lt;h4&gt;Delivery&lt;/h4&gt;
            &lt;p&gt;After a deal is won it needs to be delivered! This is the funnest part of consulting!&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&#34;uk-visible@m&#34;&gt;
        &lt;div class=&#34;uk-card&#34;&gt;
            &lt;div style=&#34;z-index: 980;&#34; uk-sticky=&#34;bottom: true&#34;&gt;
                &lt;img src=&#34;http://res.cloudinary.com/dxqjvpa0t/image/upload/v1493867443/Sales_Marketing_Funnel_4x_almfpo.png&#34;/&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Starting a consulting company looks easy, after all, &amp;ldquo;&lt;em&gt;I&amp;rsquo;m&lt;/em&gt; the person with the technical skills, so I&amp;rsquo;m the one making everything happen!&amp;rdquo; What most technologists don&amp;rsquo;t appreciate is everything that&amp;rsquo;s shielded from them day-to-day; the days of phone calls to qualify leads, the hours of content preparation to win a deal, the intricacies of negotiations during the legal process, and so forth. This is why you can&amp;rsquo;t do it alone.&lt;/p&gt;

&lt;p&gt;Working &lt;strong&gt;for&lt;/strong&gt; a consulting company allows a technologist to &lt;em&gt;specialize&lt;/em&gt;. &lt;strong&gt;Starting&lt;/strong&gt; a consulting company requires a technologist to &lt;em&gt;generalize&lt;/em&gt;. As a generalist I love the new things that I learn every day, from the nuances of an errors &amp;amp; omissions insurance policy to the difference between a &amp;ldquo;zero rated&amp;rdquo; and &amp;ldquo;exempt&amp;rdquo; tax rate on an invoice. I also spend a portion of my day reading ACM articles and hacking on Akka.&lt;/p&gt;

&lt;h2 id=&#34;6-find-a-partner&#34;&gt;6. Find a partner&lt;/h2&gt;

&lt;p&gt;One of the most important decisions to make is whether or not to launch a company on your own or with a co-founder.&lt;/p&gt;

&lt;div class=&#34;uk-child-width-expand@s&#34; uk-grid&gt;
    &lt;div&gt;
        &lt;p&gt;I would not have survived the first month – let alone the first six months – of business without my co-founder, Jason Goodwin. Although I&#39;m highly technical, I decided that it would be impossible to develop the business model of RedElastic while also keeping an eye on the fast-moving technology industry. I knew I needed someone to fill the visionary role of &lt;em&gt;Super Hacker&lt;/em&gt; (also known as &#34;CTO&#34;). Not only has Jason been invaluable from a technical perspective on client work, but the small conversations we have in the office every day refine my own approach to every aspect of RedElastic.&lt;/p&gt;
        &lt;p&gt;I couldn&#39;t and wouldn&#39;t do this alone. If you can&#39;t find someone else who believes in your vision enough to take the plunge into entrepreneurship with you, look at it as a signal that you may need to refine your vision, develop your network, develop your skills, or all of the above. I would argue that this is the hardest part of starting any type of business and where most businesses fail before they even begin.&lt;/p&gt;
        &lt;p&gt;In consulting specifically, one of the hardest parts of building a business is finding new work while currently working with customers. Without at least a two-person team this is virtually impossible without working part time, sacrificing the quality of your billable work, never sleeping, or all of the above.&lt;/p&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;div class=&#34;uk-inline&#34;&gt;
            &lt;img src=&#34;http://res.cloudinary.com/dxqjvpa0t/image/upload/v1493911811/16665101_1312553878782661_9119854844747736905_o_paondc.jpg&#34; alt=&#34;&#34;&gt;
            &lt;div class=&#34;uk-overlay uk-light uk-position-bottom&#34;&gt;
                &lt;p&gt;Jason and Kevin exploring Dubai; apparently we even dress the same. This was not planned.&lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;I repeat, don&amp;rsquo;t start a consulting business on your own. Thar be dragons.&lt;/p&gt;

&lt;h2 id=&#34;7-budget-budget-budget&#34;&gt;7. Budget, budget, budget&lt;/h2&gt;

&lt;p&gt;Starting a consulting company is not as simple as finding a domain name and leaning in. Here are the approximate up-front costs in Canada. (If you&amp;rsquo;re not from Canada your milage may vary.)&lt;/p&gt;

&lt;table class=&#34;uk-table&#34;&gt;
    &lt;thead&gt;
        &lt;tr&gt;
            &lt;td&gt;Expense&lt;/td&gt;
            &lt;td&gt;Cost&lt;/td&gt;
            &lt;td&gt;Description&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tfoot&gt;
      &lt;tr&gt;
        &lt;td&gt;Estimate&lt;/td&gt;
        &lt;td&gt;$20,300-39,300&lt;/td&gt;
    &lt;tbody&gt;
        &lt;tr&gt;
            &lt;td&gt;Incorporation fees&lt;/td&gt;
            &lt;td&gt;$300&lt;/td&gt;
            &lt;td&gt;Canada is one of the easiest countries in the world to &lt;em&gt;start&lt;/em&gt; a business in. From start to finish incorporation took me about 5 days. Federal incorporation offers a few major benefits including (very limited) trade name protection. It&#39;s also possible to start a LLC (limited liability company). Different structures come with their own pros and cons, such as different tax treatments, so you&#39;ll need to spend some time investigating the right choice depending on your circumstances and locale. It&#39;s often a good idea to consult with a lawyer and accountant before making your decision as it&#39;s very time consuming to change your mind once things are in motion.
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Legal fees&lt;/td&gt;
            &lt;td class=&#34;uk-text-nowrap&#34;&gt;$5,000-15,000&lt;/td&gt;
            &lt;td&gt;Once you&#39;re incorporated you&#39;ll need to define the legal structure of your corporation. You&#39;ll likely need to set up a share structure, appoint the initial officers of the company, and finalize a shareholder agreement. Finding a good lawyer is absolutely critical at this stage. Budget up to $10,000 for initial legal fees and $5,000 for reviewing early client contracts. Your lawyer will draft all the off-the-shelf contracts you&#39;ll use with clients, such as NDAs (non disclosure agreements), MSAs (master service agreements), and SOWs (statements of work). Many clients will require that you use their in-house contracts, so your lawyer will need to review those in detail before you sign. &lt;strong&gt;Take your time to find a good lawyer.&lt;/strong&gt; Our lawyer has been so integral to our success that it would be impossible imagining sleeping soundly at night without his involvement.&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;Insurance&lt;/td&gt;
            &lt;td class=&#34;uk-text-nowrap&#34;&gt;$8,000-11,000&lt;/td&gt;
            &lt;td&gt;Your corporation will need to be insured against errors, omissions, general liability, and a host of other circumstances that can arise. Unlike full time employees, independant contractors have virtually no protection from a lawsuit if they screw up. Find a good insurance broker and plan to spend anywhere from $5,000 to $15,000 per year. You will not be able to sign any contracts with customers until you have insurance in place. There&#39;s virtually no company in the world that will deal with uninsured consulting firms.&lt;/td&gt;
        &lt;/tr&gt; 
        &lt;tr&gt;
            &lt;td&gt;Benefits&lt;/td&gt;
            &lt;td class=&#34;uk-text-nowrap&#34;&gt;$5,000-8,000&lt;/td&gt;
            &lt;td&gt;If you plan on hiring anyone or covering the founders under a benefits plan, budget thousands of dollars for initial coverage. In Canada this is fairly straightforward as the government covers basic health care, but offering early employees things like life and dental insurance is important to attract top-talent.&lt;/td&gt;
        &lt;/tr&gt;          
        &lt;tr&gt;
            &lt;td&gt;SaaS tools&lt;/td&gt;
            &lt;td class=&#34;uk-text-nowrap&#34;&gt;$2,000-5,000&lt;/td&gt;
            &lt;td&gt;This is one expense that you can spread out over the first year of operations. Budget at least 2-5k on all of the tools that you&#39;ll require to run your business. Sales tools (such as Salesforce) and HR tools (such as BambooHR) are not necessarily cheap, but automating everything possible is the only way to effectively run a consulting company.&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Those are only the up-front expenses, and don&amp;rsquo;t factor in salaries for the founding team, equipment like laptops, and so forth. I&amp;rsquo;ll assume you already have a laptop and assume you&amp;rsquo;ll budget for the expenses above along with approximately 6 months of salary to live on while developing your clientele. It may take 9-12 months to become cash-flow positive, even at reduced founder salaries.&lt;/p&gt;

&lt;p&gt;I also didn&amp;rsquo;t factor in office space to the above estimates. Working remotely is fine for an established company, but it&amp;rsquo;s pretty important to co-locate with your partner and founding employees to foster a culture and bond. Consulting is tough, so being there to provide emotional support, coaching, and mentoring is critical. It&amp;rsquo;s impossible to give an estimate on how much office space will run as it&amp;rsquo;s so location dependant, but in Toronto, the going rate for a decent turn-key office is $2,000-3,000 per month in the downtown core and slightly less in the inner suburbs. (If you move too far outside of the core it may become difficult to stay connected with your customers and recruit top talent.)&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have $50,000-100,000 cash on hand that you are willing to part with, think carefully about how badly you believe in what you&amp;rsquo;re doing. Nothing is free, especially dreams.&lt;/p&gt;

&lt;p&gt;Relationships, trust, and integrity are far more important than short-term profits. If you&amp;rsquo;re able to make tough decisions that are right for customers &lt;em&gt;first&lt;/em&gt; and yourself &lt;em&gt;second&lt;/em&gt;, even if it means weathering a short-term storm, you&amp;rsquo;re ready to give this a shot. If you want to make an impact in the industry there&amp;rsquo;s nothing better than staking your own claim and starting a business to serve others. If you want to make a lot of money, there are easier ways.&lt;/p&gt;

&lt;h3 id=&#34;the-canadian-economy-is-not-as-business-friendly-as-you-think&#34;&gt;The Canadian economy is not as business friendly as you think&lt;/h3&gt;

&lt;p&gt;While there&amp;rsquo;s money and mentorship on-tap for product companies through angel investors and venture capital firms, starting a services business is a lonely experience.&lt;/p&gt;

&lt;p&gt;Canada&amp;rsquo;s GDP is fueled by real estate, which is where most banks throw their money. I would have a much easier time borrowing the better part of $750,000 to buy a &lt;a href=&#34;https://www.realtor.ca/Residential/Single-Family/18110217/58-CEDARCREST-Boulevard-Toronto-Ontario-M4B2P2-OConnor-Parkview&#34;&gt;tiny bungalow&lt;/a&gt; (in the midst of a housing bubble) than borrowing $75,000 to help grow RedElastic.&lt;/p&gt;

&lt;p&gt;According to a &lt;a href=&#34;https://www.thestar.com/business/economy/2017/05/01/real-estates-huge-role-in-canadian-economy-causing-worry.html&#34;&gt;recent article&lt;/a&gt; in the Toronto Star, in Canada &amp;ldquo;residential mortgages today make up about 52 per cent of all chartered bank loans, versus 21 per cent for business lending.&amp;rdquo;  And much of that business lending is for real estate.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Bank of Canada figures show 14 per cent of all private business loans from chartered banks are now bound for so-called real estate operator industries.&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;As an entrepreneur building a service-oriented business, the cards are stacked against you in our current business climate. Angels, VCs, and Banks want nothing to do with you; Banks are literally betting on real estate rather than any other type of business, and VCs aren&amp;rsquo;t interested in service companies because they don&amp;rsquo;t have the scale potential of a product company (although, technically speaking, while Uber is more valuable than RedElastic, RedElastic is more profitable than Uber).&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t underestimate:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The cost of starting a services company, even though major capital expenses like equipment is not required, and&lt;/li&gt;
&lt;li&gt;The time required to become cash-flow positive&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You&amp;rsquo;re own your own, financially speaking. Don&amp;rsquo;t start a consulting company and buy a bungalow at the same time.&lt;/p&gt;

&lt;h2 id=&#34;8-be-a-friend-to-yourself&#34;&gt;8. Be a friend to yourself&lt;/h2&gt;

&lt;p&gt;Starting a business is stressful so it&amp;rsquo;s important to carve out some time for yourself. I make a habit of going to see live music whenever I have a chance. I also go to the gym once a week and lift weights until I fall over, no matter what else is happening.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve also picked up a few bad habits, such as smoking (again) and ordering too much pizza. Nobody is perfect.&lt;/p&gt;

&lt;p&gt;On that note&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;9-give-credit-and-take-blame&#34;&gt;9. Give credit and take blame&lt;/h2&gt;

&lt;p&gt;In a full-time role, a big part of your job is to manage your own career. In consulting, a big part of your job is to manage the career of others. I&amp;rsquo;ve watched consulting companies walk into an office, proclaim everything the full-time team has accomplished to date as &amp;ldquo;shit&amp;rdquo;, and proceed to create chaos for the people in the trenches at every opportunity to further their own ends.&lt;/p&gt;

&lt;p&gt;Consultants do not exist to crank out code. We exist to train, educate, and mentor. Coding is &lt;em&gt;fun&lt;/em&gt;, so it&amp;rsquo;s vital to spread your knowledge through a team so &lt;em&gt;they&lt;/em&gt; can deliver as much code as possible while providing mentorship and oversight. Helping other people to reach their full potential is a huge part of the job. That means leaving behind way more than code, it means leaving behind a piece of your knowledge and a piece of your culture.&lt;/p&gt;

&lt;p&gt;With this in mind, it&amp;rsquo;s critical to embrace a simple philosophy that Mike Kelland, VP of Professional Services at Lightbend, first shared with me while he was the CEO of BoldRadius.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;Give credit and take blame.&amp;rdquo; &amp;ndash; Mike Kelland&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is such an important piece of advice that I still repeat it to myself during tense times. If a mistake is made while you&amp;rsquo;re on-site, assume that it&amp;rsquo;s your mistake. Own it and identify the next steps required to improve the situation. When success is ultimately achieved, give the credit to others! There will be time for you to internalize your own impact on the success of a project, take a little piece of the credit for your company, and ultimately share your role in the achievement with others. Looking back on my career, the only way I was able to grow professionally is because other people subscribed to this philosophy and I benefitted from it. We all stand on the shoulders of giants.&lt;/p&gt;

&lt;h1 id=&#34;summary&#34;&gt;Summary&lt;/h1&gt;

&lt;p&gt;If you read this whole article and still want to start a consulting company, buckle up and go for it. If you go down this path and need any advice, feel free to reach out.&lt;/p&gt;

&lt;p&gt;I hope this has been helpful in a general sense as well. Some of these lessons I learned the hard way and am happy if they provide anyone with a head start. Hopefully some of this advice will be of benefit you no matter what path you choose.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goodbye, Lightbend</title>
      <link>http://rocketpages.github.io/goodbye-lightbend</link>
      <pubDate>Sun, 09 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/goodbye-lightbend</guid>
      <description>&lt;p&gt;It’s been an incredible two-and-a-half years.&lt;/p&gt;

&lt;p&gt;My journey to Lightbend began after an incredible experience as an early customer of Typesafe. I began using the Typesafe stack — &lt;a href=&#34;http://www.scala-lang.org/&#34;&gt;Scala&lt;/a&gt;, &lt;a href=&#34;https://www.playframework.com/&#34;&gt;Play&lt;/a&gt;, and &lt;a href=&#34;http://akka.io/&#34;&gt;Akka&lt;/a&gt; — in 2012 to help deliver the revamped &lt;a href=&#34;http://walmart.ca&#34;&gt;Walmart Canada&lt;/a&gt; consumer platform. It was a fantastic project that afforded our team a tremendous opportunity; to help bring the techniques of &lt;em&gt;reactive programming&lt;/em&gt; to one of the biggest companies in the world and to millions of customers. The incredible team I worked with at Nurun (since acquired by Razorfish) delivered the project in 2013 — you can read the case study &lt;a href=&#34;https://www.lightbend.com/resources/case-studies-and-stories/walmart-boosts-conversions-by-20-with-lightbend-reactive-platform&#34;&gt;here&lt;/a&gt; and my thoughts on transitioning an enterprise to Scala &lt;a href=&#34;https://medium.com/@kvnwbbr/transitioning-to-scala-d1818f25b2b7#.euk2348p7&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;After launch the Walmart project was remarkably stable and in very good hands, so I decided to leave Nurun in early 2014 to seek out a new adventure. Shortly after leaving Nurun a major opportunity presented itself — an invitation to join Typesafe as their Developer Advocate after one of my favourite technical bloggers, James Ward, &lt;a href=&#34;https://www.jamesward.com/2014/04/27/new-adventures-for-a-technology-adventurer&#34;&gt;left Typesafe for Salesforce&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The learning curve was tremendous. I’ve always been comfortable speaking in public on a limited scale, but there’s a massive difference between speaking in front of a trusted group of colleagues and a room full of hundreds of strangers. Over the months and years that followed, not only did I become comfortable in front of an audience but I began to look forward to it. Since July 2014 I’ve spoken at a wide range of events, including Gartner AADI, Gartner Catalyst, GeeCON, Scala Up North, and the list goes on. Traveling around the world to share my opinions on topics that I’m passionate about — topics like reactive programming, fast data, and transforming heritage architectures into scalable real-time systems — was a career-changing experience.&lt;/p&gt;

&lt;p&gt;While contributions to open source projects are typically measured by lines of code, it’s also important to write and speak about our experiences with emerging technologies; both the success stories and the challenges, the pros and cons of different architectures based on real-world experiences, and do it all in an open and transparent way. I was able to do all of that while at Lightbend. Sharing experiences is a vital part of the open source ecosystem and one of the reasons I felt so strongly about spending so much time on the road away from my friends and family.&lt;/p&gt;

&lt;p&gt;Over time I began meeting with companies using or evaluating our platform on major projects, which for over a year put me in the position of being the principle (and only) sales engineer and developer advocate in North America. To say this part of my career was exhausting is an understatement, but after meeting with hundreds of customers and prospective customers I’ve probably been exposed to more ways to leverage the Lightbend stack than most other developers in the world. This has given me a broad perspective on the problems we’re solving with technologies like Scala, both what works and what doesn&amp;rsquo;t. I wouldn&amp;rsquo;t trade these lessons for anything.&lt;/p&gt;

&lt;div class=&#34;uk-inline&#34;&gt;
    &lt;img src=&#34;http://res.cloudinary.com/dxqjvpa0t/image/upload/v1475992868/laguna-beach-2016_hmnkoi.jpg&#34; alt=&#34;&#34;&gt;
    &lt;div class=&#34;uk-overlay uk-overlay-default uk-position-bottom photo-overlay&#34;&gt;
        Laguna Beach, 2016. The Lightbend sales team, execs, and I (third from right). I&#39;m going to miss this crew!
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;My time with customers made me miss &lt;em&gt;being&lt;/em&gt; a customer. I crave the thought of getting out there and building something awesome. I miss hands-on architecture, I miss nurturing a team of developers, and I miss tackling the hard problems being solved in the business world.&lt;/p&gt;

&lt;p&gt;So last week I made one of the biggest decisions of my career.&lt;/p&gt;

&lt;p&gt;Effective October 31, I&amp;rsquo;m leaving Lightbend to seek out my next adventure. I&amp;rsquo;m planning to take some time off and recharge before diving back into the ridiculously fun world of building software.&lt;/p&gt;

&lt;p&gt;To my colleagues at Lightbend, thank you for everything you’ve taught me over the years. To the new friends I’ve made on my travels over the years, I look forward to keeping in touch.&lt;/p&gt;

&lt;p&gt;I don’t know where my career will take me next, but I&amp;rsquo;m excited to explore all of the possibilities.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Zen of Process</title>
      <link>http://rocketpages.github.io/the-zen-of-process</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/the-zen-of-process</guid>
      <description>

&lt;p&gt;Process improvements are the most impactful way to rise above your individual work. All organizations live and die by the quality of their processes.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“Give me six hours to chop down a tree and I will spend the first four sharpening the axe.” 
—  Abraham Lincoln&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Have you ever wondered how an organization with tens of thousands of people survives without collapsing under its own weight? It doesn&amp;rsquo;t survive by hiring &amp;ldquo;only hire the best&amp;rdquo;. Scaling a business from &lt;em&gt;tens&lt;/em&gt; to &lt;em&gt;tens of thousands&lt;/em&gt; depends on hiring motivated people and supporting them with solid processes.&lt;/p&gt;

&lt;p&gt;The task of documenting and formalizing the way we work naturally within an organization can be thought of as a type of &lt;em&gt;corporate anthropology&lt;/em&gt;. At first blush even speaking about process improvements may sound impersonal, but studying how people work together within a company is the study of relationships within that company. Improvements can be made simply by documenting and formalizing those relationships, which makes it possible to study them and improve upon them over time.&lt;/p&gt;

&lt;h2 id=&#34;give-credit-and-take-blame&#34;&gt;Give credit and take blame&lt;/h2&gt;

&lt;p&gt;One of the most important aspects of a healthy process is that it can be &lt;em&gt;delegated&lt;/em&gt; to. The inverse of delegating to a process is delegating to an individual. This distinction has a profound impact on corporate culture, recognized by common vocabulary; “you” instead of “we”, “I” instead of “us”. It&amp;rsquo;s more humane to investigate the shortcomings of a process than a person. People within the organization are still accountable for individual performance, but with clearly defined expectations measuring individual performance becomes more fair and accountable.&lt;/p&gt;

&lt;h2 id=&#34;anti-patterns&#34;&gt;Anti-patterns&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Red tape&lt;/em&gt; is the evil twin of process. Red tape is created when processes are dictated from above by those who don’t understand how people within the organization already work. We should attempt to document and formalize natural interactions well before attempting to improve upon them. Formalizing any working relationship by people who aren’t directly in the mix of the relationship can be well-meaning but ultimately doomed. Senior leadership should take an interest in how to improve upon relationships within the organization, but only after they&amp;rsquo;ve been formalized by the people working inside those relationships.&lt;/p&gt;

&lt;p&gt;On the other hand, senior leadership should show an unwavering dedication to practitioners who attempt to document the way they work. Supporting your anthropologists is a sure-fire way to capture the essence of how the company truly functions.&lt;/p&gt;

&lt;h2 id=&#34;trust-is-the-fuel-for-healthy-processes&#34;&gt;Trust is the fuel for healthy processes&lt;/h2&gt;

&lt;p&gt;Imagine we work together at the same company. Now imagine that I recommend a process to optimize how we prepare for meetings, perhaps even tracking the amount of time we spend preparing, and then a system for rating the quality of the meeting afterwards. If you distrust me or the company, this process would seem incredibly intrusive and perhaps even a little scary.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Why does my company want to measure the time I spend preparing for meetings? Does everyone hate my meetings? Are my co-workers complaining about me? Am I going to be fired?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On top of being scary, you may also think that the process is an incredible waste of time, distrustful that anything useful would ever come out of such an exercise.&lt;/p&gt;

&lt;p&gt;If you trust your company, you may feel optimistic that measuring meeting effort will result in &lt;em&gt;less meetings&lt;/em&gt; and &lt;em&gt;more time for interesting work&lt;/em&gt;. Perhaps you anticipate new guidelines coming out of this process to create a new process for formalizing meeting invites. Perhaps you envision this process eventually leading to more time for interesting work rather than being forced to sit through an endless stream of Powerpoint presentations all day. You likely assume your company is protecting your most valuable asset; time.&lt;/p&gt;

&lt;p&gt;Trust is the currency of an organization. Documenting and formalizing the way people work together requires trust on all sides. If there&amp;rsquo;s major pushback from practitioners at an exercise like this, the root cause issue may be deeper than a simple distaste of standardization. It could signal a lack of trust.&lt;/p&gt;

&lt;h2 id=&#34;the-value-of-process&#34;&gt;The value of process&lt;/h2&gt;

&lt;p&gt;Many technology startups ruthlessly optimize all processes related to code and infrastructure. Many of those same startups view non-code related processes as a burden. That’s because they’ve only seen red tape, which leaves a mark. If enough people in your company have been scarred by red tape in previous jobs you have a culture that resists optimization. This is a major barrier to unlocking the full potential within an organization.&lt;/p&gt;

&lt;h2 id=&#34;find-your-sherpa&#34;&gt;Find your sherpa&lt;/h2&gt;

&lt;p&gt;The only way to turn a formalized process into a de-facto company standard is through a process sponsor. I refer to this person as a &lt;em&gt;process sherpa&lt;/em&gt;. A process sherpa is like a super-mentor. They’re someone senior, someone you’ve accumulated trust with, and someone with the trust of the entire organization. Your process sherpa can take your ideas all the way to the top of the organization. If your ideas are good enough they may be communicated across the entire organization and perhaps become a standard way of working.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;If you visualize the capacity of your company as a bubble, imagine the bubble expanding ever so slightly every time a process is standardized. Introduce enough process improvements and you’ll grow the capacity of your organization without hiring a single new employee. Hiring should be a last resort to expand capacity, and only done when backed up by data from a process. For instance, a development team following &lt;a href=&#34;https://en.wikipedia.org/wiki/Kanban&#34;&gt;Kanban&lt;/a&gt; may track the average amount of time that work waits to move from one stage to another, and then hire a new developer to improve this measurement. Without data that comes out of a process, hiring becomes a political game, usually driven by whoever yells the loudest for additional headcount. Don&amp;rsquo;t play this game.&lt;/p&gt;

&lt;p&gt;Whether you&amp;rsquo;re a startup or part of the largest fortune 500 enterprise, &lt;em&gt;always be improving your processes&lt;/em&gt; and &lt;em&gt;always be working on your process to improve processes&lt;/em&gt;. An unwavering commitment to process improvement is the only way to reliably expand the capacity of your company over time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reflecting on Reactive Systems</title>
      <link>http://rocketpages.github.io/reflecting-on-reactive-systems</link>
      <pubDate>Thu, 16 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/reflecting-on-reactive-systems</guid>
      <description>&lt;p&gt;The past year has been a wonderful period of learning and reflection on this exciting new software architecture. I’ve written about reactive application development on Medium (&lt;a href=&#34;https://medium.com/reactive-programming/what-is-reactive-programming-bc9fa7f4a7fc&#34;&gt;What is Reactive Programming?&lt;/a&gt;), contributed to ReadWrite (&lt;a href=&#34;http://readwrite.com/2015/03/12/reactive-programming-conductr-kevin-webber&#34;&gt;&amp;ldquo;Reactive&amp;rdquo; Systems: Easy To Program, Now Easier To Manage&lt;/a&gt;), and contributed to InfoQ (&lt;a href=&#34;http://www.infoq.com/news/2014/09/what-is-reactive-programming&#34;&gt;Actor-based Concurrency for Reactive Systems&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Another high note is that &lt;a href=&#34;http://www.meetup.com/Reactive-TO&#34;&gt;Reactive Programming Toronto&lt;/a&gt; is closing in on 300 members. New reactive programming groups are forming all over the world. It&amp;rsquo;s an exciting time to be a developer who cares about their craft and I strongly feel we&amp;rsquo;re at the beginning of a major paradigm shift. I believe the reactive programming paradigm will drive the next major innovation in how software is crafted for the web, to meet the expectations of both end-users and organizations who are looking for ever increasing ways to secure a competitive advantage online.&lt;/p&gt;

&lt;p&gt;Reactive systems are at the heart of a new breed of enterprise system that embraces modern infrastructure. Gone are the days of a single monolithic application running in a single data center. Not only does this type of application not scale to meet the ever-increasing stress placed on a modern web application, but it provides very little room for future growth; if your data center goes down, your system goes down; if your business requirements evolve, you must modify, test, and deploy a singular, complex monolithic system, and hope that all of the coupled and tangled logic within holds up under the changes you&amp;rsquo;ve made. In order to combat the challenges of keeping monolithic systems up and making risky changes to them, we create ever-more complex business and technical processes to protect ourselves. The cycle repeats, and the system grows in both risk and complexity. The system must be rewritten. And the cycle repeats again. Why do we as software developers allow these cycles to continue?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m working on a series of articles to outline end-to-end reactive architectures. Stay tuned if you&amp;rsquo;re interested in learning more about implementing reactive systems in the enterprise.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Retrospective: A Night of Reactive Programming</title>
      <link>http://rocketpages.github.io/retrospective-a-night-of-reactive-programming</link>
      <pubDate>Wed, 06 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/retrospective-a-night-of-reactive-programming</guid>
      <description>

&lt;p&gt;I hosted the first event for &lt;a href=&#34;http://meetup.com/reactive-to&#34;&gt;ReactiveTO&lt;/a&gt; on July 24th. It was fantastic evening filled with great talks on reactive programming principles, microservices, Akka, and ReactiveCocoa.&lt;/p&gt;

&lt;h2 id=&#34;impressions&#34;&gt;Impressions&lt;/h2&gt;

&lt;p&gt;It was wonderful to see so many folks show up with interest in such a wide variety of languages and toolkits. We had developers representing the communities of JavaScript (Node.js), Ruby (EventMachine), Objective-C (ReactiveCocoa), and Scala (Akka), among many other languages and toolkits. Reactive programming is an emerging paradigm that aims to help developers solve current problems using new techniques under new conditions.&lt;/p&gt;

&lt;p&gt;Simply put, with 2.9 billion people now using the internet, our old tricks and techniques of developing robust software must adapt. Language and framework tribalism will play a very small role in the upcoming big shift towards Reactive programming, so it was wonderful to meet other developers with the same point of view. The common factor uniting us all is the desire to build better software.&lt;/p&gt;

&lt;div class=&#34;uk-inline&#34;&gt;
    &lt;img src=&#34;http://res.cloudinary.com/dxqjvpa0t/image/upload/v1407310645/IMG_1380_kkwn7u.jpg&#34; alt=&#34;Aleksey Nikiforov - Akka demo&#34;&gt;
    &lt;div class=&#34;uk-overlay uk-overlay-default uk-position-bottom photo-overlay&#34;&gt;
        Aleksey Nikiforov demonstrating a live real-time heartbeat app in Akka.
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;thank-you&#34;&gt;Thank you!&lt;/h2&gt;

&lt;p&gt;A big thanks goes out to my fellow presenters, in no particular order: Dejan Glozic (IBM), Sergey Gavrilyuk (Qwrty), Aleksey Nikiforov (PagerDuty), and &lt;a href=&#34;http://www.nurun.com/en/careers/toronto&#34; title=&#34;Nurun Toronto&#34;&gt;Nurun Toronto&lt;/a&gt; for hosting our first event.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Agile and Waterfall can live together in harmony</title>
      <link>http://rocketpages.github.io/agile-and-waterfall-together</link>
      <pubDate>Fri, 15 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/agile-and-waterfall-together</guid>
      <description>

&lt;p&gt;Agile is challenging to use on certain projects, like those bound by fixed-price, fixed-date contracts. Agencies, governments, and other organizations who are bound by contracts struggle to implement Agile effectively. Contracts force software developers to adopt less flexible approaches to development in order to satisfy negotiated requirements and deadlines. Even worse than taking an alternate approach is to use the wrong approach entirely. This can manifest itself as a completely bastardized version of Agile, which is unfortunately the most common version in use today.&lt;/p&gt;

&lt;h2 id=&#34;understanding-the-history-of-agile-and-waterfall&#34;&gt;Understanding the history of Agile and Waterfall&lt;/h2&gt;

&lt;p&gt;Agile is not new. The earliest form of Agile, IIDD (iterative and incremental design and development), was in use by engineers over 75 years ago. Plan-Do-Check-Act (PDCA) was later made popular by Dr. W. Edwards Deming in the 1950s, but the core concepts behind PDCA (later Plan-Do-Study-Act or PDSA) were based on the scientific method and the work of Francis Bacon in the 1600s. The core concepts behind Agile are not simply old, they&amp;rsquo;re ancient.&lt;/p&gt;

&lt;p&gt;Waterfall is a comparatively modern methodology first used on software development projects in the 50s. The term itself was coined in the 1976 paper &lt;a href=&#34;http://dl.acm.org/citation.cfm?id=807650&#34; title=&#34;Software Requirements: Are They Really A Problem?&#34;&gt;Software Requirements: Are They Really A Problem?&lt;/a&gt; by Bell and Thayer.&lt;/p&gt;

&lt;p&gt;Waterfall was originally embraced on software projects by companies involved in the military and aerospace industries that needed a rigorous process to recognize the importance of delivering perfect software the first time. When lives are at stake, up-front research and rigorous quality control are far more important than the flexibility to respond to changing requirements late in a project. Waterfall reflected the times. Before the Internet made pushing out patches to broken software somewhat trivial, a rigorous process was needed to ensure that patches were the exception and not the rule.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Early CMMI adopters were developers of large-scale, risk-averse, mission-critical sytems, often with high levels of management oversight and hierarchal governance; whereas the early adopters of Agile methods generally focused on smaller single-team development projects with volatile requirements in a software-only environment.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Contrary to popular opinion, modern forms of Agile got their start in large corporations. Kent Beck created XP (eXtreme Programming) while at Chrysler in the 90s, while FDD (Feature Driven Development) was created by United Overseas Bank in Singapore. These are massive, bureaucratic companies with established cultures that were already managed by mature processes, but they created and implemented new forms of Agile in order to plug gaps they identified in their existing Waterfall processes.&lt;/p&gt;

&lt;h2 id=&#34;using-agile-when-waterfall-is-more-appropriate&#34;&gt;Using Agile when Waterfall is more appropriate&lt;/h2&gt;

&lt;p&gt;The word Agile is hot. The word Waterfall is not. This polarization attracts a large number of practitioners and managers to Agile with a fundamental misunderstanding of what Agile is, let alone how to apply it and when to apply it. There are a great deal of companies misusing Agile rather than properly using existing Waterfall processes simply because Agile sounds better on paper.&lt;/p&gt;

&lt;p&gt;While many software developers are familiar with the &lt;a href=&#34;http://agilemanifesto.org/&#34; title=&#34;Manifesto for Agile Software Development&#34;&gt;Manifesto for Agile Software Development&lt;/a&gt;, few managers are aware of the &lt;a href=&#34;http://pmdoi.org/&#34; title=&#34;Project Management Declaration of Interdependence (DoI)&#34;&gt;Project Management Declaration of Interdependence (DoI)&lt;/a&gt;, a set of six management principles that help to encourage better leadership of Agile in the software engineering profession.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The title &amp;ldquo;Declaration of Interdependence&amp;rdquo; has multiple meanings. It means that project team members are part of an interdependent whole and not a group of unconnected individuals. It means that project teams, their customers, and their stakeholders are also interdependent. Project teams who do not recognize this interdependence will rarely be successful.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Practitioner-driven (bottom-up) Agile only addresses software construction, while management-driven (top-down) Agile can address the other inter-dependencies that impact an entire organization; everything from writing contracts that support Agile to ensuring that all disciplines required to deliver software are on the same team. In an ideal world Agile is understood and embraced by both practitioners and managers.&lt;/p&gt;

&lt;p&gt;Warning signs that your organization has a fundamental misunderstanding of Agile:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;High pressure to release a fixed-scope project on a specific date due to contractual obligations&lt;/li&gt;
&lt;li&gt;Developers included on the Agile team while QA, Operations, and Strategy/Creative are managed separately&lt;/li&gt;
&lt;li&gt;Overtime to meet deadlines rather than adding additional sprints&lt;/li&gt;
&lt;li&gt;Tweaking metrics such as velocity and estimates to meet objectives&lt;/li&gt;
&lt;li&gt;A lack of retrospectives and process improvements&lt;/li&gt;
&lt;li&gt;Team members not empowered to self-organize, such as team members being assigned work by managers&lt;/li&gt;
&lt;li&gt;An inability to remove team members who actively sabotage the process&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The effects of poorly implemented Agile are terrible. Abused Agile is essentially Waterfall without any research, analysis, estimation, or quality control processes in place. This is exactly why some experienced software engineers consider Agile to be nothing more than cowboy coding.&lt;/p&gt;

&lt;h2 id=&#34;the-best-of-both-worlds&#34;&gt;The best of both worlds&lt;/h2&gt;

&lt;p&gt;Waterfall is far from perfect, but nobody can argue against up-front analysis and research, especially when the result of that research makes its way into a contract. Where Agile falls short on delivering contractually-bound projects, Waterfall recognizes those constraints and provides a framework to address them. On the other hand, requirements can never be defined with absolute accuracy up-front, which is why newer software engineers consider Waterfall processes to be bloated and burdensome.&lt;/p&gt;

&lt;p&gt;What we really need is a hybrid process that blends the best of both worlds. Both Agile and Waterfall have valuable things to offer software development teams, so instead of choosing one or the other, we should keep an open mind and evaluate the strengths of both in order to address our specific opportunities and constraints.&lt;/p&gt;

&lt;p&gt;What Agile has to offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Placing people first by recognizing capacity and adapting to change rather than forcing overtime and burnout&lt;/li&gt;
&lt;li&gt;Empowering teams to self-organize and work to their full potential without micromanagement&lt;/li&gt;
&lt;li&gt;Placing value on working software over pie-in-the-sky documentation&lt;/li&gt;
&lt;li&gt;Striving for constant process improvement through retrospectives&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What Waterfall has to offer:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Recognizing the importance of dates, especially when bound by contractual obligations or government regulations&lt;/li&gt;
&lt;li&gt;Placing value on getting it right the first time in industries where failure can be catastrophic&lt;/li&gt;
&lt;li&gt;Effectively scaling up and out on large teams&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;a-balanced-approach&#34;&gt;A balanced approach&lt;/h2&gt;

&lt;p&gt;Firm release dates always present a challenge. The less flexible a release date is, the more up-front work is required to mitigate risk. Some projects must launch on a specific date no matter what, especially when regulated by the government or other market forces. That said, firm release dates cost money; &amp;ldquo;measure twice, cut once&amp;rdquo; isn&amp;rsquo;t the most efficient way to launch a modern software product when the market shifts in minutes rather than months. The more flexibility with a release date, the more flexibility with the overall process. An ideal balance for some teams involves Waterfall up front followed by Agile during construction and post construction. Looking at a project in two-phases makes sense, as one phase of the project may dominate over the other depending on the amount of flexibility with scope and timelines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://res.cloudinary.com/dxqjvpa0t/image/upload/v1407116865/agilewaterfallprocess-3_p6i7ks.png&#34; alt=&#34;&#34; title=&#34;Agile/Waterfall&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re able to adopt Agile in its purest form, kudos. For the rest of us who are bound by constraints outside of our control, the best approach is to keep an open mind and address our individual circumstances. As long as the process you adopt is open and transparent, it will reflect reality rather than hide from it. The team and ultimately the quality of software produced by the team will benefit greatly. The software engineering profession will always benefit from less dogma and more skeptical, rational thinking.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating to Git, Part 3: Moving your code to Git</title>
      <link>http://rocketpages.github.io/migrating-to-git-part-3-moving-your-code-to-git</link>
      <pubDate>Tue, 11 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/migrating-to-git-part-3-moving-your-code-to-git</guid>
      <description>

&lt;p&gt;This is the third and final part in a three part series about migrating to Git. I recommend reading part one and part two if you haven&amp;rsquo;t already. Migrating to Git is worth it, but it&amp;rsquo;s not a trivial decision.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kevinwebber.ca/migrating-to-git-part-1-advantages/&#34; title=&#34;Migrating to Git, Part 1: Advantages&#34;&gt;Migrating to Git, Part 1: Advantages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kevinwebber.ca/migrating-to-git-part-2-prerequisites/&#34; title=&#34;Migrating to Git, Part 2: Prerequisites&#34;&gt;Migrating to Git, Part 2: Prerequisites&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re ready to proceed with a migration to Git, congratulations! You&amp;rsquo;re about to start using one of the best development tools available today.&lt;/p&gt;

&lt;h2 id=&#34;pre-migration-steps&#34;&gt;Pre-migration steps&lt;/h2&gt;

&lt;p&gt;Anyone who has worked with me knows I’m a big fan of checklists, and the transition to Git is non-trivial enough to warrant a solid understanding of the questions that should be answered before pulling the trigger on migration.&lt;/p&gt;

&lt;h3 id=&#34;1-do-you-need-to-maintain-commit-history&#34;&gt;1. Do you need to maintain commit history?&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re moving from SVN to Git, the migration to Git is greatly simplified if you don&amp;rsquo;t need to retain revision history. Otherwise, you&amp;rsquo;ll need to explore SubGit or git-svn.&lt;/p&gt;

&lt;p&gt;Some of the steps required for git-svn are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Retrieve a list of SVN committers and transform them to Git users (name, e-mail)&lt;/li&gt;
&lt;li&gt;Clone the SVN repo using git-svn&lt;/li&gt;
&lt;li&gt;Convert svn:ignore to .gitignore&lt;/li&gt;
&lt;li&gt;Push the SVN repo to a bare Git repo&lt;/li&gt;
&lt;li&gt;Rename &amp;ldquo;trunk&amp;rdquo; to &amp;ldquo;master&amp;rdquo;&lt;/li&gt;
&lt;li&gt;Clean up branches and tags&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These aren&amp;rsquo;t the most time consuming tasks, but they&amp;rsquo;re not quick either. If you&amp;rsquo;re unconcerned about porting over history, I highly recommend skipping most of the steps above. We simply kept historical data in FishEye and instructed developers to query it if they had any questions about pre-Git revisions. Other version control systems will have their own tools to help with the migration, but converting each different VCS is beyond the scope of this series.&lt;/p&gt;

&lt;h3 id=&#34;2a-install-git-and-other-dependencies-on-the-central-git-server&#34;&gt;2a. Install Git and other dependencies on the central Git server&lt;/h3&gt;

&lt;p&gt;At a bare minimum you&amp;rsquo;ll need to install Git. I&amp;rsquo;m assuming you&amp;rsquo;ll be using a Linux server, so this is an easy step. You may also need to install an up-to-date version of Java or Ruby (depending on what repository management tool you choose below).&lt;/p&gt;

&lt;h3 id=&#34;2b-set-up-a-repository-management-tool&#34;&gt;2b. Set up a repository management tool&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s easy to initially set up Git by hand, but it becomes more and more of a burden to maintain a central Git repository without an easy-to-use management tool. Popular repository management tools include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://enterprise.github.com/&#34; title=&#34;GitHub Enterprise&#34;&gt;GitHub Enterprise&lt;/a&gt; &lt;em&gt;$$$&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atlassian.com/software/stash/overview&#34; title=&#34;Atlassian Stash&#34;&gt;Atlassian Stash&lt;/a&gt; &lt;em&gt;$&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gitlabhq.com/&#34; title=&#34;GITLAB&#34;&gt;GITLAB&lt;/a&gt; &lt;em&gt;free&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.accurev.com/kando&#34; title=&#34;AccuRev Kando&#34;&gt;AccuRev Kando&lt;/a&gt; &lt;em&gt;?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My personal favourite is &lt;em&gt;GitHub Enterprise&lt;/em&gt;, but the cost is hard to justify. GitHub Enterprise would cost our team of over 20 developers &lt;em&gt;$10,000 per year&lt;/em&gt; in licensing. Ouch.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;re using &lt;em&gt;Atlassian Stash&lt;/em&gt; at the moment instead, and while it&amp;rsquo;s frustratingly bare-bones, it provides the bare minimum of what we need and is much cheaper. We&amp;rsquo;re banking on it gaining features as it matures.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Kando&lt;/em&gt; adds workflow functionality, similar to the concept of ClearCase swim-lanes. Depending on your existing workflow it may be too prescriptive for your needs or it may be exactly what you need.&lt;/p&gt;

&lt;h3 id=&#34;2c-select-and-install-a-git-client-and-additional-developer-tools&#34;&gt;2c. Select and install a Git client and additional developer tools&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://code.google.com/p/msysgit/&#34; title=&#34;msysgit&#34;&gt;msysgit&lt;/a&gt; is a no brainer for those in a Windows environment. This should be installed on all developer workstations before the migration, and each developer should create a local repository as a test to make sure it&amp;rsquo;s set up properly. This will help to avoid any day-of-migration surprises that will kill velocity.&lt;/p&gt;

&lt;p&gt;Other helpful tools include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;An advanced three-way diff and merge tool such as &lt;a href=&#34;http://www.scootersoftware.com/&#34; title=&#34;Beyond Compare&#34;&gt;Beyond Compare&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A UI tool such as

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/tortoisegit/&#34; title=&#34;TortoiseGit&#34;&gt;TortoiseGit&lt;/a&gt; (Windows)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.syntevo.com/smartgit/index.html&#34; title=&#34;SmartGit&#34;&gt;SmartGit&lt;/a&gt; (Windows)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.git-tower.com/&#34; title=&#34;Git Tower&#34;&gt;Git Tower&lt;/a&gt; (Mac)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our developers are in a Windows environment, and we use Beyond Compare, TortoiseGit, and bash. For the most part we&amp;rsquo;re happy, but I&amp;rsquo;ve also heard good things about SmartGit. I&amp;rsquo;ve also heard amazing things about Tower, and I would not hesitate to switch to it if our developers used OSX.&lt;/p&gt;

&lt;h3 id=&#34;2d-code-review-and-other-tools&#34;&gt;2d. Code review and other tools&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s worth the time to stop and identify areas of weakness in your current process. Opportunities for improvement may exist with support from the right choice of tools. This is an especially good opportunity to identify a solid code review tool, which will also force the team to decide on a post-commit or pre-commit workflow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post-commit workflow&lt;/strong&gt;: Review code after it has been pushed and merged to the development branch&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Pre-commit workflow&lt;/strong&gt;: Review code before it is merged

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;Pull requests&lt;/em&gt; rather than pushing are an example of a pre-commit workflow&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some decent code review tools for Git include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://getbarkeep.org/&#34; title=&#34;Barkeep&#34;&gt;Barkeep&lt;/a&gt; (post-commit workflow)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.google.com/p/gerrit/&#34; title=&#34;Garrit&#34;&gt;Gerrit&lt;/a&gt; (pre-commit workflow)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.atlassian.com/software/crucible/&#34; title=&#34;Crucible&#34;&gt;Crucible&lt;/a&gt; (post-commit workflow)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As of version 1.3 &lt;em&gt;Stash&lt;/em&gt; supports pull requests, which are an excellent choice for code reviews. &lt;em&gt;GitHub Enterprise&lt;/em&gt; and &lt;em&gt;GITLAB&lt;/em&gt; also support pull requests, so it&amp;rsquo;s not always necessary to augment your Git management tool with an external review tool. You should evaluate each and decide which works the best for your team. One thing to keep in mind is that pull requests only help to review code that has yet to be merged.&lt;/p&gt;

&lt;h3 id=&#34;3-ssh-authentication&#34;&gt;3. SSH authentication&lt;/h3&gt;

&lt;p&gt;Developers will most likely authenticate with remote Git repositories using SSH. This will require all developers to generate a private/public SSH key pair and add their public key to the Git server (in the authorized_keys file or adding the public key to the Git repository management tool). Using a repository management tool like GitHub Enterprise will make maintaining SSH keys a much more streamlined process rather than manually adding them to the authorized_keys file.&lt;/p&gt;

&lt;h3 id=&#34;4-inventory-all-svn-related-scripts&#34;&gt;4. Inventory all SVN-related scripts&lt;/h3&gt;

&lt;p&gt;Custom scripts with SVN references should be identified as these will obviously break after the migration. This is typically the most time consuming task if a lot of SVN scripts and hooks exist as part of the current development workflow.&lt;/p&gt;

&lt;h2 id=&#34;migration-steps&#34;&gt;Migration steps&lt;/h2&gt;

&lt;p&gt;The migration itself is fairly straightforward if you aren&amp;rsquo;t preserving SVN history. If you need to port history this list will look slightly more complicated and you should look into using &lt;a href=&#34;http://subgit.com/book/index.html#installation&#34; title=&#34;SubGit&#34;&gt;SubGit&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;1-design-a-new-repository-structure&#34;&gt;1. Design a new repository structure&lt;/h3&gt;

&lt;p&gt;We had a single large SVN repository with every single application in our organization. Rather than port our monolithic SVN repository to Git, we decided to break it into smaller repositories that better fit with the conceptual and logical view of our applications.&lt;/p&gt;

&lt;p&gt;We created a separate repository for our:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Application code&lt;/li&gt;
&lt;li&gt;Application configuration artefacts&lt;/li&gt;
&lt;li&gt;Back-end processing jobs&lt;/li&gt;
&lt;li&gt;Static web resources and Apache configuration&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-create-the-new-git-repositories-locally&#34;&gt;2. Create the new Git repositories locally&lt;/h3&gt;

&lt;p&gt;We grabbed the latest version of our code from SVN and split our monolithic repository into four separate local folders. We had to clean the SVN kruft from each folder, which was incredibly fun. After all of this was done we initialized each folder as a new Git repository.&lt;/p&gt;

&lt;h3 id=&#34;3-add-content-to-git-before-building-applications&#34;&gt;3. Add content to Git before building applications&lt;/h3&gt;

&lt;p&gt;We added all of our files to Git first &lt;em&gt;before&lt;/em&gt; performing a full-build or even importing our applications into an IDE. This made it easy to create our .gitignore files, because we performed a commit of what&amp;rsquo;s in SVN and nothing else (such as compiled resources or IDE project configuration files).&lt;/p&gt;

&lt;h3 id=&#34;4-build-applications-and-configure-gitignore&#34;&gt;4. Build applications and configure .gitignore&lt;/h3&gt;

&lt;p&gt;Perform a full build of each application after you have all of your files committed to Git. You&amp;rsquo;ll immediately be able to identify all the generated build artefacts that shouldn&amp;rsquo;t be versioned. These artefacts can safely be added to .gitignore. Remember to add and commit your .gitignore file(s) too!&lt;/p&gt;

&lt;h3 id=&#34;5-update-tooling-and-scripts-to-switch-from-svn-to-git&#34;&gt;5. Update tooling and scripts to switch from SVN to Git&lt;/h3&gt;

&lt;p&gt;This is arguably one of the most time consuming tasks of the migration. For instance, Jenkins/Hudson users will need to update all of their scripts to pull from Git instead of SVN. All custom SVN-related scripts will need to be updated.&lt;/p&gt;

&lt;h3 id=&#34;6-create-central-repositories-and-push-local-commits&#34;&gt;6. Create central repositories and push local commits&lt;/h3&gt;

&lt;p&gt;If you&amp;rsquo;re using a tool like Stash or GitHub Enterprise, you&amp;rsquo;ll manage the creation of new repositories through the tool&amp;rsquo;s UI. Otherwise, you will need to create bare repositories on the Git server.&lt;/p&gt;

&lt;h3 id=&#34;7-every-developer-should-clone-commit-push-pull&#34;&gt;7. Every developer should clone, commit, push, pull&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s fairly important for all developers to clone the repo(s) right away and push code to identify any issues that may have cropped up during the migration. It&amp;rsquo;s recommended that the person leading the migration create a throw-away branch and instruct all developers to check it out and perform a few smoke-test changes.&lt;/p&gt;

&lt;p&gt;At the very least the entire team should be able to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build their environments locally&lt;/li&gt;
&lt;li&gt;Switch branches&lt;/li&gt;
&lt;li&gt;Make a small throw-away change&lt;/li&gt;
&lt;li&gt;Push their change&lt;/li&gt;
&lt;li&gt;Pull everyone else&amp;rsquo;s changes&lt;/li&gt;
&lt;li&gt;Switch branches back to the master (or release) branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;re feeling brave, you can even set things up so a change forces merge conflicts. This will get the team used to using the difftool and mergetool commands.&lt;/p&gt;

&lt;h3 id=&#34;8-application-s-should-be-built-in-a-test-environment-and-shaken-down&#34;&gt;8. Application(s) should be built in a test environment and shaken-down&lt;/h3&gt;

&lt;p&gt;Once developers are fairly happy that they&amp;rsquo;re set up and ready to go, the version of code now on the central repositories should be built and deployed to test environments. Presumably this will be done using a continuous integration tool and the fancy new Git scripts that were updated during pre-migration.&lt;/p&gt;

&lt;h2 id=&#34;retrospective&#34;&gt;Retrospective&lt;/h2&gt;

&lt;p&gt;Most of the issues that come up during post-migration are related to the rationalization for switching to Git in the first place. During our transition we experienced very few technical issues with our code, but we experienced the natural frustration of learning a new tool and a new development process all at the same time.&lt;/p&gt;

&lt;p&gt;Be prepared to deal with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Build script failures after the modification of SVN scripts to support Git&lt;/li&gt;
&lt;li&gt;Learning curve of using Git for the first time&lt;/li&gt;
&lt;li&gt;Resistance from fans of the status quo&lt;/li&gt;
&lt;li&gt;Questions from management as to the return on investment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is it worth it? Absolutely. After the initial learning curve with Git, the smiles per minute on our team has gone up significantly.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating to Git, Part 2: Prerequisites</title>
      <link>http://rocketpages.github.io/migrating-to-git-part-2-prerequisites</link>
      <pubDate>Mon, 10 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/migrating-to-git-part-2-prerequisites</guid>
      <description>

&lt;p&gt;This is the second part of a three part series about migrating to Git. If you haven&amp;rsquo;t read part one and are unfamiliar with the advantages of Git, you should check it out.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kevinwebber.ca/migrating-to-git-part-1-advantages/&#34; title=&#34;Migrating to Git, Part 1: Advantages&#34;&gt;Migrating to Git, Part 1: Advantages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you already understand the benefits of Git, or have already read part one, welcome to part two in the series! We&amp;rsquo;re going to discuss certain pre-conditions of a migration to Git and make sure your team is ready for the transition.&lt;/p&gt;

&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Before migrating to Git, you should make sure your team is &lt;em&gt;ready&lt;/em&gt; to migrate. Changing version control systems (especially in a large team) is not a trivial undertaking, and certain technical debt should not exist in your code base to ensure a smooth transition.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a rough guide to help you evaluate whether you&amp;rsquo;re ready to migrate:&lt;/p&gt;

&lt;h3 id=&#34;1-ensure-your-code-base-is-buildable-and-stable&#34;&gt;1. Ensure your code base is buildable and stable&lt;/h3&gt;

&lt;p&gt;If you can&amp;rsquo;t perform a clean, full build of your application, you should absolutely delay your migrations plans and pay down technical debt before attempting &lt;em&gt;any&lt;/em&gt; large scale project (let alone something is risky as migrating to a different version control system). Post-migration, the entire application will need to be completely rebuilt and regression tested. This seems like an obvious prerequisite, but not every organization performs full builds on a regular basis, especially with legacy applications. Being unable to build your application or lacking confidence in your build is a recipe for disaster.&lt;/p&gt;

&lt;h3 id=&#34;2-set-up-a-continuous-integration-server&#34;&gt;2. Set up a continuous integration server&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s a good idea to implement a CI solution in order to get up-to-date feedback on build issues as developers begin to use Git for the first time. It&amp;rsquo;s amazing the types of issues that crop up in the first few days post-migration. Most issues are minor if they&amp;rsquo;re caught early enough.&lt;/p&gt;

&lt;h3 id=&#34;3-prepare-a-regression-test-plan-or-implement-automated-testing&#34;&gt;3. Prepare a regression test plan or implement automated testing&lt;/h3&gt;

&lt;p&gt;Changing version control systems is quite disruptive. Prepare for a number of things to go wrong. At the very minimum, you should plan for a full regression test of your application immediately after migration and before developers begin committing code. This window should be minimized to avoid syncing nightmares.&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t have an automated test suite, this may be a burden to your QA team. There may be a temptation to piggy-back the Git migration onto a major release and kill two testing birds with one stone, but I caution against this as it will be hard to track down the root cause of defects.&lt;/p&gt;

&lt;p&gt;If you work in a team that practices Kanban or Scrum, it&amp;rsquo;s a good idea to plan for a loss of velocity during the migration period. This loss of productivity should be minimal if the migration is planned properly. For instance, if your team practices Scrum, it may be a good idea to consider the migration iteration zero and release the product (fully tested) at the end of the sprint. A full sprint is unnecessary, but a short sprint (of a week or less) is also a good opportunity to pay down any kind of technical debt that is a blocker of the migration to Git.&lt;/p&gt;

&lt;h3 id=&#34;4-plan-for-training&#34;&gt;4. Plan for training&lt;/h3&gt;

&lt;p&gt;Our team attempted to train grassroots-style, and it was tough. Budget for at least a full day of training to ensure your developers are comfortable with core Git and DVCS concepts.&lt;/p&gt;

&lt;p&gt;It also helps that developers understand the rationale for switching version control systems, as any impedance to velocity will be met with frustration. If they understand the long-term benefits, it will make the short-term frustrations easier to deal with.&lt;/p&gt;

&lt;h3 id=&#34;5-identify-an-evangelist-to-lead-the-migration-and-post-migration-support&#34;&gt;5. Identify an evangelist to lead the migration and post-migration support&lt;/h3&gt;

&lt;p&gt;At least one member of the team should be very familiar with Git in order to ensure a smooth migration.&lt;/p&gt;

&lt;p&gt;Certain questions will come up, like:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What&amp;rsquo;s the team&amp;rsquo;s branching strategy?&lt;/li&gt;
&lt;li&gt;How will the team collaborate?&lt;/li&gt;
&lt;li&gt;What merge strategy will be used?

&lt;ul&gt;
&lt;li&gt;Squash merges? Fast-forward merges?&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;How often should merges take place from feature branches to a release branch?&lt;/li&gt;
&lt;li&gt;Will we use sprint branches? Release branches? Or integration directly into a master branch?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It&amp;rsquo;s helpful for one person to take ownership of the migration and establish a developer workflow before the migration. The workflow will evolve, but it helps to have a starting point and a rough objective. The evangelist will guide the team through the initial learning curve, and after the entire team is comfortable with Git the decision making process will naturally become more democratic and decentralized, just like Git itself.&lt;/p&gt;

&lt;p&gt;Speaking from personal experience, it&amp;rsquo;s helpful (but not required) that the evangelist is not distracted with development tasks immediately after post-migration. I recommend considering them a build manager or a DevOps team-member for a finite period of time post-migration to ensure capacity for support.&lt;/p&gt;

&lt;h3 id=&#34;6-make-a-list-of-why-you-re-migrating-to-git-in-the-first-place&#34;&gt;6. Make a list of why you&amp;rsquo;re migrating to Git in the first place&lt;/h3&gt;

&lt;p&gt;This the least technical prerequisite and more of a return-on-investment analysis exercise.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s important to come up with a justification for the migration. If you&amp;rsquo;re unable to make this list and be prepared to justify it, you probably don&amp;rsquo;t have someone on the team that understands the benefits of Git well enough to support the migration through the often challenging transitional period. Simply put, if you&amp;rsquo;re unable to justify the expense and disruption of a VCS migration, don&amp;rsquo;t bother. Wait around until you&amp;rsquo;re about to create a reasonable business case and that you have specific measurable goals to revisit during the post-migration retrospective.&lt;/p&gt;

&lt;p&gt;This list may include items such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Increased developer productivity&lt;/li&gt;
&lt;li&gt;Encouraging exploration and refactoring through rapid branching&lt;/li&gt;
&lt;li&gt;Reducing errors during branch merges (shaking down merges locally)&lt;/li&gt;
&lt;li&gt;More naturally supporting team and release workflow&lt;/li&gt;
&lt;li&gt;Supporting workers who aren&amp;rsquo;t always on the network&lt;/li&gt;
&lt;li&gt;Developer happiness&lt;/li&gt;
&lt;li&gt;Etcetera&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-final-steps&#34;&gt;The final steps&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re confident and ready to migrate to Git, check out the final part of my Migrating to Git series, &lt;a href=&#34;http://kevinwebber.ca/migrating-to-git-part-3-moving-your-code-to-git/&#34; title=&#34;Migrating to Git, Part 3: Moving your code to Git&#34;&gt;Migrating to Git, Part 3: Moving your code to Git&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Migrating to Git, Part 1: Advantages</title>
      <link>http://rocketpages.github.io/migrating-to-git-part-1-advantages</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/migrating-to-git-part-1-advantages</guid>
      <description>

&lt;p&gt;Git is unlike typical version control systems. Sure, Git is used to version files, but how is that any different than SVN or SourceSafe or ClearCase?&lt;/p&gt;

&lt;p&gt;Git expects developers to understand how it works under the hood. It expects developers to be comfortable with the command line to get the most out of it. It provides very little in the way of convention and expects you to design your own workflow simply by using it as another tool in your arsenal. Git is not an out-of-the box solution. If you plan to transition to Git you also need to set aside time to examine your overall development process. You won&amp;rsquo;t get the most out of it otherwise and will possibly experience a challenging migration.&lt;/p&gt;

&lt;p&gt;Doesn&amp;rsquo;t that sound dreamy?&lt;/p&gt;

&lt;p&gt;Before you become discouraged, let me explain that Git is not only a version control tool. It&amp;rsquo;s also a development workflow design tool, it&amp;rsquo;s a quality control tool, it&amp;rsquo;s a productivity tool.&lt;/p&gt;

&lt;p&gt;Git is simply one of the best things that&amp;rsquo;s happened to the development workflow in a very long time; &lt;em&gt;if you choose to master it&lt;/em&gt;. If you&amp;rsquo;re not willing or able to put in the amount of time needed to properly learn a new tool and are simply looking for a place to dump your code, stick with your current VCS or consider migrating to something other than Git.&lt;/p&gt;

&lt;h2 id=&#34;three-advantages-of-git-over-svn&#34;&gt;Three advantages of Git over SVN&lt;/h2&gt;

&lt;p&gt;SVN is a &lt;em&gt;centralized&lt;/em&gt; version control system (CVCS). Git is a &lt;em&gt;distributed&lt;/em&gt; version control system (DVCS).&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s the difference between a CVCS like SVN and a DVCS like Git?&lt;/p&gt;

&lt;h3 id=&#34;1-stability-of-shared-repositories&#34;&gt;1. Stability of shared repositories&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SVN&lt;/strong&gt;: All developers commit work-in-progress code to shared repositories&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;: Developers commit code to local repositories first&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Local repositories are later synced with shared repositories. The workflow looks like this:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;clone -&amp;gt; pull -&amp;gt; add -&amp;gt; commit -&amp;gt; push
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Until a git user executes a &lt;em&gt;push&lt;/em&gt;, commits are kept safe and sound in their local repository.&lt;/p&gt;

&lt;p&gt;Why does this matter?&lt;/p&gt;

&lt;h4 id=&#34;speed&#34;&gt;Speed&lt;/h4&gt;

&lt;p&gt;Developers using Git commit freely as their work does not immediately impact the rest of the team. They experiment in branches, committing code or stashing changes throughout the day. Nothing is permanent and every mistake can be reversed without impacting the entire team. They can throw everything away and start from scratch if necessary. Not only that, but Git commands are blazing fast because they don&amp;rsquo;t involve network traffic to a centralized server. Only &lt;em&gt;fetch&lt;/em&gt;, &lt;em&gt;pull&lt;/em&gt;, and &lt;em&gt;push&lt;/em&gt; involve any network traffic. Every other command operates on the user&amp;rsquo;s local repository.&lt;/p&gt;

&lt;h4 id=&#34;confidence&#34;&gt;Confidence&lt;/h4&gt;

&lt;p&gt;The Git workflow removes fear and builds confidence. Over time a team is more and more willing to take on work they may have deemed too scary when using a VCS like SVN. Why is this? They don&amp;rsquo;t need to struggle between the lesser of two evils: not committing code, or sharing code that isn&amp;rsquo;t fully tested. Git lets a developer have the best of both worlds; keeping their code in version control, and only sharing changes when they are ready to be &lt;em&gt;pushed&lt;/em&gt; to the team. It&amp;rsquo;s nice knowing that your code is safely version but that you are not permanently impacting your team if you make a mistake.&lt;/p&gt;

&lt;h4 id=&#34;collaboration&#34;&gt;Collaboration&lt;/h4&gt;

&lt;p&gt;One may argue that collaboration is hampered because code is kept in local repositories until finished or stable. Keep in mind that nothing stops multiple developers from &lt;em&gt;remoting&lt;/em&gt; to each other&amp;rsquo;s repositories to share work-in-progress code. Other options for collaboration include &lt;em&gt;pushing&lt;/em&gt; work in progress code to a code review repository before pushing it to a stable, public repository. Collaboration options are limited only the imagination of your team.&lt;/p&gt;

&lt;h3 id=&#34;2-branching&#34;&gt;2. Branching&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SVN&lt;/strong&gt;: Developers often perform bulk commits towards the end of feature development. Work-in-progress code is often left un-versioned to avoid negatively impacting the rest of the team.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;: Branches are created and destroyed rapidly and locally to support new features or experimental code. Local branches are pushed to various remote repos for &lt;em&gt;team collaboration&lt;/em&gt;. The risk of un-versioned code is severely mitigated with private repositories and the ease of pushing branches to shared servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why does this matter?&lt;/p&gt;

&lt;h4 id=&#34;integration&#34;&gt;Integration&lt;/h4&gt;

&lt;p&gt;Developers using Git don&amp;rsquo;t impact the entire team with individual commits being shared before an entire story (or feature) is stable and tested. Developers create branches and merge changes when a feature is ready for integration. Branching is possible with SVN, but it isn&amp;rsquo;t used in the same fashion as in Git, because branches in SVN are expensive to create.&lt;/p&gt;

&lt;h4 id=&#34;process-and-workflow&#34;&gt;Process and workflow&lt;/h4&gt;

&lt;p&gt;Git is just as much a workflow tool as it is a source control tool. Rapid branching makes working on more than one feature an incredibly flexible process. Merging in SVN is often a nail-biting experience because it&amp;rsquo;s such a potentially destructive process. By contrast a developer using Git can create a new branch, merge multiple branches into it, resolve conflicts, and test locally &lt;em&gt;before squashing&lt;/em&gt; the individual commits and integrating it with a main release branch. The worst case scenario in Git is starting over again locally without any impact to the team. The worst case scenario in SVN is corrupting the central repository and getting fired.&lt;/p&gt;

&lt;h3 id=&#34;3-task-switching&#34;&gt;3. Task switching&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SVN&lt;/strong&gt;: Switching between branches is painful. It&amp;rsquo;s essentially like copying and pasting an entire directory structure and having multiple local copies of your project.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Git&lt;/strong&gt;: Git handles switching branches by simply updating the contents of a working folder with the contents of the branch you specify. There are no folders to duplicate or other steps that impede your workflow.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Why does this matter?&lt;/p&gt;

&lt;h4 id=&#34;productivity&#34;&gt;Productivity&lt;/h4&gt;

&lt;p&gt;Developers using Git simply commit (or stash) their work-in-progress code and &lt;em&gt;checkout&lt;/em&gt; the alternate branch they&amp;rsquo;d like to work on. Their working directory is updated in place with the correct code and they continue to work uninterrupted. When they finish their task they simply …&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pull -&amp;gt; commit -&amp;gt; push -&amp;gt; checkout
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;… the previous branch they were working on.&lt;/p&gt;

&lt;h2 id=&#34;to-be-continued&#34;&gt;To be continued&lt;/h2&gt;

&lt;p&gt;Are you excited about Git? I am, and so are a lot of other developers!&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re interested in learning more about the tasks involved in migrating to Git, please read the next two instalments of my &lt;em&gt;Migrating to Git&lt;/em&gt; series:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kevinwebber.ca/migrating-to-git-part-2-prerequisites/&#34; title=&#34;Migrating to Git, Part 2: Prerequisites&#34;&gt;Migrating to Git, Part 2: Prerequisites&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kevinwebber.ca/migrating-to-git-part-3-moving-your-code-to-git/&#34; title=&#34;Migrating to Git, Part 3: Moving your code to Git&#34;&gt;Migrating to Git, Part 3: Moving your code to Git&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Joy at QCon New York</title>
      <link>http://rocketpages.github.io/joy-at-qcon-new-york</link>
      <pubDate>Mon, 02 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/joy-at-qcon-new-york</guid>
      <description>

&lt;p&gt;I recently travelled to New York City to attend QCon.&lt;/p&gt;

&lt;p&gt;Joy isn&amp;rsquo;t the typical emotion that comes to mind when one pictures enterprise software and enterprise software developers, but technical culture is changing rapidly and more people are recognizing the &lt;em&gt;business value of joy&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s an exciting time to be a software developer.&lt;/p&gt;

&lt;p&gt;A decade ago we watched a grim-faced Peter Gibbons in the movie Office Space commiserate about his mind-numbing job of churning out Y2K patches for the cold and heartless Initech Corporation. Today we watch Mark Zuckerburg in The Social Network conquer the world in a hoodie. While Mark Zuckerburg may not be the software developer that geeks around the world aspire to become, it does signal a rapid change in popular culture.&lt;/p&gt;

&lt;p&gt;In the past a programming job was to be endured until something better came along. Today being a talented hands-on software developer is something to aspire to. A decade ago mediocrity flourished, encouraged by heavy-handed processes and endless bureaucracy, driving frustrated developers into other roles and professions. Today engineers rapidly imagine and create everything from new businesses to entirely new business domains.&lt;/p&gt;

&lt;p&gt;The “cloud”, SaaS, PaaS, the App Store, the Marketplace. A decade ago businesses could afford a technological misstep. Today businesses are ruthlessly judged on their technical prowess by a generation of people who look at a magazine as a broken iPad.&lt;/p&gt;

&lt;h2 id=&#34;highlights&#34;&gt;Highlights&lt;/h2&gt;

&lt;p&gt;For me, the highlight of QCon was meeting so many other developers who are just as passionate about technology as I am. From the CTOs of companies like Etsy to fellow hands-on developers from Toronto, everyone I spoke with at QCon had an educated and informed opinion about the reality of developing software in 2012. Surprisingly, most of the people I met were not focused on the nitty gritty low-level details of implementing code, but instead focused on how people interact with each other and how people interact with software. Does what we build make people happy? Is the environment we work at positive? Can we build better software and be even happier in the process?&lt;/p&gt;

&lt;p&gt;Software developers are people who build software for other people. It&amp;rsquo;s amazingly simple, but so often overlooked. As a profession we spend enormous amounts of time thinking about how to optimize our processes to suit machines, but often spend too little time thinking about how to optimize our processes to suit people. The result? Many software developers find themselves working in lonely conditions with little chance to interact with the people they build for.&lt;/p&gt;

&lt;p&gt;Great companies understand that great software comes from developers who understand, empathize, and feel connected to the people they create for. Great companies understand that great products are created by joyful people.&lt;/p&gt;

&lt;h2 id=&#34;great-companies-think-alike&#34;&gt;Great companies think alike&lt;/h2&gt;

&lt;p&gt;When software developers think of prototypical great companies, they probably think of names such as Facebook, Twitter, Etsy, and Menlo. All of these companies were represented at QCon, and all of these companies share certain cultural traits and processes that help attract some of the brightest engineers to their ranks.&lt;/p&gt;

&lt;p&gt;What common processes or beliefs do most of these companies share?&lt;/p&gt;

&lt;h3 id=&#34;1-bootcamp&#34;&gt;1. Bootcamp&lt;/h3&gt;

&lt;p&gt;Top companies start an employment relationship the right way, with a warm welcome that includes mentorship and training. Not only technical training, but also a gentle and welcoming introduction to an employer&amp;rsquo;s culture. This welcoming is sometimes referred to as &lt;em&gt;bootcamp&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Bootcamp is arguably a terrible term to use for such a positive experience. When I think of bootcamp I think of Full Metal Jacket, but bootcamp at software companies has little in common with the bootcamp envisioned by Stanley Kubrick.&lt;/p&gt;

&lt;h3 id=&#34;2-empathetic-development&#34;&gt;2. Empathetic development&lt;/h3&gt;

&lt;p&gt;The inspirational &lt;a href=&#34;http://www.menloinnovations.com/our-story/partners&#34; title=&#34;Richard Sheridan&#34;&gt;Richard Sheridan&lt;/a&gt; put it so eloquently.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;We work in an industry full of pyromaniacs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Firefighting. Being thrown into the fire. Burn-down. Burnout.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a certain macho geek swagger associated with the analogies used in tech. Maybe this is why so few hands-on developers are female and we&amp;rsquo;re pretty much the most non-diverse profession in the world. As an industry we take pride in weeding out the weak with ruthless nerd rage. Every working developer has a memory of a failed software project and the satisfied smirk of co-workers who enjoyed watching the meltdown.&lt;/p&gt;

&lt;p&gt;We often promote talented engineers from technical roles to management roles in order to perpetuate the cycle of machine over man. These new managers are offered little training and guidance in their new roles. We sit back and watch as they manage people the same way they managed machines and wonder why the entire organization is miserable.&lt;/p&gt;

&lt;p&gt;Overtime. Death marches. Deadlines.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s only a matter of time when archaic practices of the past are rendered obsolete because they simply &lt;em&gt;don&amp;rsquo;t make money&lt;/em&gt;. It&amp;rsquo;s impossible for miserable businesses to compete with joyful ones. The only reason this type of culture still permeates our industry is because of how few truly joyful businesses exist.&lt;/p&gt;

&lt;p&gt;Would you rather use Microsoft Project or Basecamp? Changepoint or Tick? QuickBooks or FreshBooks?&lt;/p&gt;

&lt;h3 id=&#34;3-innovation-days&#34;&gt;3. Innovation days&lt;/h3&gt;

&lt;p&gt;Top companies seek out innovators. There&amp;rsquo;s a big difference between talking about innovation and investing in innovation. How much time do you allocate for your team to explore their own ideas? None? You&amp;rsquo;re not an innovator.&lt;/p&gt;

&lt;p&gt;The best, most disruptive, most lucrative ideas are often not in the official plan. Your clients don&amp;rsquo;t want to pay for them yet. They&amp;rsquo;re simply ideas swimming in the heads of your team. Not all of these ideas pay off, but some of them have turned into the most ubiquitous technologies we use today, like Google Maps and Facebook Timeline.&lt;/p&gt;

&lt;h3 id=&#34;4-experienced-developers-are-sherpas-not-pack-mules&#34;&gt;4. Experienced developers are Sherpas, not pack mules&lt;/h3&gt;

&lt;p&gt;Most companies struggle to provide a career path for their most senior hands-on technical talent. To paraphrase &lt;a href=&#34;http://laribee.com/&#34; title=&#34;David Laribee&#34;&gt;David Laribee&lt;/a&gt; of VersionOne, many senior developers reach a point of becoming a pack mule. They become so specialized in version 8.1.4.9 of RandomTechnology that they can never escape it, and the rest of their days are spent in quiet desperation pushing around packs of commodity code.&lt;/p&gt;

&lt;p&gt;What&amp;rsquo;s the difference between a junior team member and a senior team member? Is it years of service? Of course not, it&amp;rsquo;s the transition from student to teacher.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The cheerful smiles and legendary strength of the Sherpas have been an integral part of Everest climbing expeditions from the very beginning. Indeed, very few significant successes have been achieved without them.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Just as Sherpas help climbers reach the top of Everest, technical Sherpas can help entire teams navigate the most specialized, complex, brittle, and least-documented areas of code. Rather than continue to utilize them as pack mules, they can instead transition to the role of advisor and teacher of current-state technology.&lt;/p&gt;

&lt;p&gt;Some organizations are great facilitators of this transition through mentoring and career coaching. Not all technical talent is extroverted, and without support they can very naturally slip into the role of pack mule. Don&amp;rsquo;t allow this to happen. Eliminate silos of knowledge by helping your most experienced team members pass their experience along to the next generation.&lt;/p&gt;

&lt;h2 id=&#34;summary&#34;&gt;Summary&lt;/h2&gt;

&lt;p&gt;Companies who embrace the business value of joy have a remarkable advantage because there are still so many horrible companies creating horrible software. It&amp;rsquo;s simply too easy to compete against miserable companies, especially in the enterprise software market where misery is the norm rather than the exception. More and more companies are recognizing the business opportunity and optimizing for happiness. These companies making a lot of money in the process.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s an exciting time to be a software developer, and it was an exciting time to attend the first QCon held in New York City. I&amp;rsquo;ll be spending more time thinking about how to do my part and bring happiness to all the teams I work with in the future.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Multiplayer tic-tac-toe in Java using the WebSocket API, Netty (NIO), and jQuery</title>
      <link>http://rocketpages.github.io/multiplayer-tic-tac-toe-in-java-using-the-websocket-api-netty-nio-and-jquery</link>
      <pubDate>Wed, 02 Nov 2011 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/multiplayer-tic-tac-toe-in-java-using-the-websocket-api-netty-nio-and-jquery</guid>
      <description>

&lt;p&gt;What does this game of tic-tac-toe and Twitter have in common? Both have been implemented using relatively the same technologies: Java and Netty. It was big news in 2010 when Twitter migrated their search from Ruby on Rails to Java-based Netty (&lt;a href=&#34;http://engineering.twitter.com/2011/04/twitter-search-is-now-3x-faster_1656.html&#34; title=&#34;read about it here&#34;&gt;read about it here&lt;/a&gt;). Not only was it big in the news department, but it was also big in the results department: Twitter reported their search performance increased by 3x.&lt;/p&gt;

&lt;h2 id=&#34;what-is-netty&#34;&gt;What is Netty?&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jboss.org/netty&#34; title=&#34;Netty&#34;&gt;Netty&lt;/a&gt; is a client server framework by JBoss that simplifies network programming. Netty is built on top of &lt;a href=&#34;http://en.wikipedia.org/wiki/New_I/O&#34; title=&#34;Java NIO&#34;&gt;Java NIO&lt;/a&gt; but provides a much more simple API to work with. Netty can be used to build a custom server for network communications; it can be used to build anything including a lightweight HTTP server, a TCP / UDP server, a WebSocket server, or any other network server you can dream of. Because Netty is built on Java NIO, Netty&amp;rsquo;s programming model is asynchronous. This means Netty is very well suited for any number of bi-directional communication projects such as real-time group chat or anything else requiring the server to &lt;a href=&#34;http://en.wikipedia.org/wiki/Push_technology&#34; title=&#34;push information to a client&#34;&gt;push information to a client&lt;/a&gt; rather than other methods of network communication such as &lt;a href=&#34;http://en.wikipedia.org/wiki/Comet_(programming)&#34; title=&#34;long-polling&#34;&gt;long-polling&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;what-is-the-websocket-protocol&#34;&gt;What is the WebSocket protocol?&lt;/h2&gt;

&lt;p&gt;WebSocket is a protocol used for bi-directional asynchronous communications between a client (usually a web browser) and a server that supports the WebSocket protocol.&lt;/p&gt;

&lt;p&gt;A WebSocket client connects to a server via standard HTTP and performs a handshake, which creates a persistent tunnel between the client and server. After the handshake is performed the client and the server communicate freely using a message/event-driven programming model (binding actions/methods to events). The beautiful thing about the WebSocket protocol is the number of persistent connections that WebSocket servers can handle, easily numbering in the ten-of-thousands, and the volume of messages that can be processed (depending on the way the server is implemented).&lt;/p&gt;

&lt;h2 id=&#34;netty-in-action-a-game-of-tic-tac-toe&#34;&gt;Netty in action: a game of tic-tac-toe&lt;/h2&gt;

&lt;p&gt;Rather than build the same-old group chat application everyone else does to show off the flexibility of Netty and the WebSocket protocol, I decided to build a simple game of tic-tac-toe instead. It seems like an odd decision considering tic-tac-toe is a turn-based game rather than a real-time game, but most tic-tac-toe game demos on the net are single-player. Rather than build another single player game of tic-tac-toe, let&amp;rsquo;s build a multiplayer game!&lt;/p&gt;

&lt;p&gt;The core concepts behind the game are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The tic-tac-toe client and server can support a (theoretically) infinite number of simultaneous games, and each game supports 2 players&lt;/li&gt;
&lt;li&gt;The player loads the client (a web page) and waits for an opponent&lt;/li&gt;
&lt;li&gt;An opponent loads the client&lt;/li&gt;
&lt;li&gt;Both players are matched together automatically&lt;/li&gt;
&lt;li&gt;The server responds to both players to let them know their game has started. The server notifies the client which player should go first and each player&amp;rsquo;s assigned letter&lt;/li&gt;
&lt;li&gt;The client only allows one player to select a cell at once&lt;/li&gt;
&lt;li&gt;After each turn, the other player is notified of the other player&amp;rsquo;s selection and their screen is updated automatically&lt;/li&gt;
&lt;li&gt;After each turn the server determines if someone has won or if the game is a draw&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you&amp;rsquo;d like to review the full code for the working Netty tic-tac-toe client and server before reading ahead, feel free to check it out:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rocketpages/Netty-TicTacToe-Server&#34; title=&#34;https://github.com/rocketpages/Netty-TicTacToe-Server&#34;&gt;https://github.com/rocketpages/Netty-TicTacToe-Server&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rocketpages/TicTacToe-Client&#34; title=&#34;https://github.com/rocketpages/TicTacToe-Client&#34;&gt;https://github.com/rocketpages/TicTacToe-Client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;building-the-netty-server&#34;&gt;Building the Netty server&lt;/h3&gt;

&lt;p&gt;The first step to creating our tic-tac-toe server is to build the server itself. Creating a new server in Netty is dead simple. We simply need to instruct Netty which port to bind to and which pipeline factory to use.&lt;/p&gt;

&lt;p&gt;Netty works based on inbound and outbound &amp;ldquo;handlers&amp;rdquo;; upstream handlers and downstream handlers. As a message is either received by the server or sent by the server, it is acted upon by the handlers that you specify in the pipeline factory. This is a flexible architecture and lets us work in a very modular fashion on any given message. Anyone who has done MDB, MQ, or SOAP programming (SOAP handler chain) should be familiar with the concept already.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;class&lt;/span&gt; TicTacToeServer {
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;void&lt;/span&gt; main(String[] args) &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception {
	    ChannelFactory factory =
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; NioServerSocketChannelFactory(
	        Executors.&lt;span style=&#34;color: #FF0000&#34;&gt;newCachedThreadPool&lt;/span&gt;(),
	        Executors.&lt;span style=&#34;color: #FF0000&#34;&gt;newCachedThreadPool&lt;/span&gt;());
	    ServerBootstrap bootstrap = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; ServerBootstrap(factory);
	    bootstrap.&lt;span style=&#34;color: #FF0000&#34;&gt;setPipelineFactory&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; WebSocketServerPipelineFactory());
	    bootstrap.&lt;span style=&#34;color: #FF0000&#34;&gt;setOption&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;child.tcpNoDelay&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;);
	    bootstrap.&lt;span style=&#34;color: #FF0000&#34;&gt;setOption&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;child.keepAlive&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;);
	    bootstrap.&lt;span style=&#34;color: #FF0000&#34;&gt;bind&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; InetSocketAddress(&lt;span style=&#34;color: #0000FF&#34;&gt;9000&lt;/span&gt;));
	    System.&lt;span style=&#34;color: #FF0000&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color: #FF0000&#34;&gt;println&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;TicTacToe Server: Listening on port 9000&amp;quot;&lt;/span&gt;);
	}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The next step is creating the pipeline factory. In this case we&amp;rsquo;re using a custom pipeline factory called WebSocketServerPipelineFactory. We could also have built this as an anonymous class as our implementation is fairly simple, but I decided to break it out into it&amp;rsquo;s own high-level class.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;class&lt;/span&gt; WebSocketServerPipelineFactory &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;implements&lt;/span&gt; ChannelPipelineFactory {  
    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;public&lt;/span&gt; ChannelPipeline getPipeline() &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception {  
        ChannelPipeline pipeline = pipeline();  
        pipeline.&lt;span style=&#34;color: #FF0000&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;decoder&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; HttpRequestDecoder());  
        pipeline.&lt;span style=&#34;color: #FF0000&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;aggregator&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; HttpChunkAggregator(&lt;span style=&#34;color: #0000FF&#34;&gt;65536&lt;/span&gt;));  
        pipeline.&lt;span style=&#34;color: #FF0000&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;encoder&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; HttpResponseEncoder());  
        pipeline.&lt;span style=&#34;color: #FF0000&#34;&gt;addLast&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;handler&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; TicTacToeServerHandler());  
        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;return&lt;/span&gt; pipeline;  
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Take a second to look at the above code. I&amp;rsquo;ll break out some of the key terms and concepts to understand:&lt;/p&gt;

&lt;h4 id=&#34;channel&#34;&gt;Channel&lt;/h4&gt;

&lt;p&gt;A channel is a persistent connection (tunnel) from a specific client to the server.&lt;/p&gt;

&lt;h4 id=&#34;channelpipeline&#34;&gt;ChannelPipeline&lt;/h4&gt;

&lt;p&gt;Each channel can be customized with it&amp;rsquo;s own pipeline. When you take a second to think about it, it becomes obvious how powerful this concept is. Encoders, decoders, aggregator, and handlers are grouped together to form a &lt;em&gt;pipeline&lt;/em&gt;. A pipeline instructs Netty how to act on each channel.&lt;/p&gt;

&lt;h4 id=&#34;encoders-decoders-and-aggregators&#34;&gt;Encoders, decoders, and aggregators&lt;/h4&gt;

&lt;p&gt;Netty is a low-level framework built on Java NIO. When a client first connects with the server, we need to perform a WebSocket handshake. NIO doesn&amp;rsquo;t care about HTTP however, it cares about packets. In order to process the HTTP request and response, we need to instruct Netty how to deal with the packets we&amp;rsquo;re receiving and sending. Netty makes this easy and provides multiple encoders, decoders, aggregator, and handlers. We&amp;rsquo;ll typically extend Netty to create our own custom handlers, but if we&amp;rsquo;re so inclined, we can also get really low-level and create our own encoders, etc. Keep in mind that handlers can be swapped-out at runtime. After the initial HTTP handshake is performed, we&amp;rsquo;re only going to be responding to WebSocket requests for this channel. You&amp;rsquo;ll see later how we change from an HTTP-based pipeline to a WebSocket-based pipeline for a specific channel (aka client, aka player).&lt;/p&gt;

&lt;h4 id=&#34;tictactoeserverhandler&#34;&gt;TicTacToeServerHandler&lt;/h4&gt;

&lt;p&gt;This is the heart of the application, responsible for consuming and pushing all messages to and from clients. An instance of this handler is specific to a channel, but we can also declare static variables to keep track of all the games of tic-tac-toe in progress at any given time.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s check out the &lt;a href=&#34;https://github.com/rocketpages/Netty-TicTacToe-Server/blob/master/src/main/java/com/tictactoe/server/TicTacToeServerHandler.java&#34; title=&#34;TicTacToeServerHandler&#34;&gt;TicTacToeServerHandler&lt;/a&gt;. I&amp;rsquo;ll discuss some of the core concepts below.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;@Override  
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;void&lt;/span&gt; messageReceived(ChannelHandlerContext ctx, MessageEvent e) &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception {  
    Object msg = e.&lt;span style=&#34;color: #FF0000&#34;&gt;getMessage&lt;/span&gt;();  
    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (msg &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;instanceof&lt;/span&gt; HttpRequest) {  
        handleHttpRequest(ctx, (HttpRequest) msg);  
    } &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (msg &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;instanceof&lt;/span&gt; WebSocketFrame) {
	    handleWebSocketFrame(ctx, (WebSocketFrame) msg);  
	}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;em&gt;messageReceived(…)&lt;/em&gt; method is the main callback method provided by Netty to process incoming messages from clients. In our case, we&amp;rsquo;ll only be processing two types of messages: HttpRequest (for the initial handshake from a client) and WebSocketFrame (for all incoming communications after the tunnel has been established).&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;void&lt;/span&gt; handleHttpRequest(ChannelHandlerContext ctx, HttpRequest req) &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception {
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Allow only GET methods.&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (req.&lt;span style=&#34;color: #FF0000&#34;&gt;getMethod&lt;/span&gt;() != HttpMethod.&lt;span style=&#34;color: #FF0000&#34;&gt;GET&lt;/span&gt;) {
	    sendHttpResponse(ctx, req, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultHttpResponse(HttpVersion.&lt;span style=&#34;color: #FF0000&#34;&gt;HTTP_1_1&lt;/span&gt;, HttpResponseStatus.&lt;span style=&#34;color: #FF0000&#34;&gt;FORBIDDEN&lt;/span&gt;));
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;return&lt;/span&gt;;
	}
	
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Serve the WebSocket handshake request.&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (req.&lt;span style=&#34;color: #FF0000&#34;&gt;getUri&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;equals&lt;/span&gt;(WEBSOCKET_PATH) &amp;amp;&amp;amp; Values.&lt;span style=&#34;color: #FF0000&#34;&gt;UPGRADE&lt;/span&gt;.&lt;span style=&#34;color: #FF0000&#34;&gt;equalsIgnoreCase&lt;/span&gt;(req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(CONNECTION)) &amp;amp;&amp;amp; WEBSOCKET.&lt;span style=&#34;color: #FF0000&#34;&gt;equalsIgnoreCase&lt;/span&gt;(req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(Names.&lt;span style=&#34;color: #FF0000&#34;&gt;UPGRADE&lt;/span&gt;))) {
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Create the WebSocket handshake response.&lt;/span&gt;
	    HttpResponse res = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultHttpResponse(HTTP_1_1, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; HttpResponseStatus(&lt;span style=&#34;color: #0000FF&#34;&gt;101&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;Web Socket Protocol Handshake&amp;quot;&lt;/span&gt;));
	    res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(Names.&lt;span style=&#34;color: #FF0000&#34;&gt;UPGRADE&lt;/span&gt;, WEBSOCKET);
	    res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(CONNECTION, Values.&lt;span style=&#34;color: #FF0000&#34;&gt;UPGRADE&lt;/span&gt;);
	
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Fill in the headers and contents depending on handshake method. New handshake specification has a challenge.&lt;/span&gt;
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (req.&lt;span style=&#34;color: #FF0000&#34;&gt;containsHeader&lt;/span&gt;(SEC_WEBSOCKET_KEY1) &amp;amp;&amp;amp; req.&lt;span style=&#34;color: #FF0000&#34;&gt;containsHeader&lt;/span&gt;(SEC_WEBSOCKET_KEY2)) {
	        &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// New handshake method with challenge&lt;/span&gt;
	        res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(SEC_WEBSOCKET_ORIGIN, req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(ORIGIN));
	        res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(SEC_WEBSOCKET_LOCATION, getWebSocketLocation(req));
	        String protocol = req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(SEC_WEBSOCKET_PROTOCOL);
	
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (protocol != &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;null&lt;/span&gt;) {
	            res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(SEC_WEBSOCKET_PROTOCOL, protocol);
	        }
	
	        &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Calculate the answer of the challenge.&lt;/span&gt;
	        String key1 = req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(SEC_WEBSOCKET_KEY1);
	        String key2 = req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(SEC_WEBSOCKET_KEY2);
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;int&lt;/span&gt; a = (&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;int&lt;/span&gt;) (Long.&lt;span style=&#34;color: #FF0000&#34;&gt;parseLong&lt;/span&gt;(key1.&lt;span style=&#34;color: #FF0000&#34;&gt;replaceAll&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;[^0-9]&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)) / key1.&lt;span style=&#34;color: #FF0000&#34;&gt;replaceAll&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;[^ ]&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;).&lt;span style=&#34;color: #FF0000&#34;&gt;length&lt;/span&gt;());
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;int&lt;/span&gt; b = (&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;int&lt;/span&gt;) (Long.&lt;span style=&#34;color: #FF0000&#34;&gt;parseLong&lt;/span&gt;(key2.&lt;span style=&#34;color: #FF0000&#34;&gt;replaceAll&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;[^0-9]&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;)) / key2.&lt;span style=&#34;color: #FF0000&#34;&gt;replaceAll&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;[^ ]&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;).&lt;span style=&#34;color: #FF0000&#34;&gt;length&lt;/span&gt;());
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;long&lt;/span&gt; c = req.&lt;span style=&#34;color: #FF0000&#34;&gt;getContent&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;readLong&lt;/span&gt;();
	        ChannelBuffer input = ChannelBuffers.&lt;span style=&#34;color: #FF0000&#34;&gt;buffer&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;16&lt;/span&gt;);
	        input.&lt;span style=&#34;color: #FF0000&#34;&gt;writeInt&lt;/span&gt;(a);
	        input.&lt;span style=&#34;color: #FF0000&#34;&gt;writeInt&lt;/span&gt;(b);
	        input.&lt;span style=&#34;color: #FF0000&#34;&gt;writeLong&lt;/span&gt;(c);
	        ChannelBuffer output = ChannelBuffers.&lt;span style=&#34;color: #FF0000&#34;&gt;wrappedBuffer&lt;/span&gt;(MessageDigest.&lt;span style=&#34;color: #FF0000&#34;&gt;getInstance&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;MD5&amp;quot;&lt;/span&gt;).&lt;span style=&#34;color: #FF0000&#34;&gt;digest&lt;/span&gt;(input.&lt;span style=&#34;color: #FF0000&#34;&gt;array&lt;/span&gt;()));
	        res.&lt;span style=&#34;color: #FF0000&#34;&gt;setContent&lt;/span&gt;(output);
	    } &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; {
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Old handshake method with no challenge:&lt;/span&gt;
	        res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(WEBSOCKET_ORIGIN, req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(ORIGIN));
	        res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(WEBSOCKET_LOCATION, getWebSocketLocation(req));
	        String protocol = req.&lt;span style=&#34;color: #FF0000&#34;&gt;getHeader&lt;/span&gt;(WEBSOCKET_PROTOCOL);
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (protocol != &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;null&lt;/span&gt;) {
	            res.&lt;span style=&#34;color: #FF0000&#34;&gt;addHeader&lt;/span&gt;(WEBSOCKET_PROTOCOL, protocol);
	        }
	    }
	
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Upgrade the connection and send the handshake response.&lt;/span&gt;
	    ChannelPipeline p = ctx.&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;getPipeline&lt;/span&gt;();
	    p.&lt;span style=&#34;color: #FF0000&#34;&gt;remove&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;aggregator&amp;quot;&lt;/span&gt;);
	    p.&lt;span style=&#34;color: #FF0000&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;decoder&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;wsdecoder&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; WebSocketFrameDecoder());
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Write handshake response to the channel&lt;/span&gt;
	    ctx.&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;write&lt;/span&gt;(res);
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Upgrade encoder to WebSocketFrameEncoder&lt;/span&gt;
	    p.&lt;span style=&#34;color: #FF0000&#34;&gt;replace&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;encoder&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;wsencoder&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; WebSocketFrameEncoder());
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Initialize the game. Assign players to a game and assign them a letter (X or O)&lt;/span&gt;
	    initGame(ctx);
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;return&lt;/span&gt;;
	}
	
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Send an error page otherwise.&lt;/span&gt;
	sendHttpResponse(ctx, req, &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultHttpResponse(
	    HttpVersion.&lt;span style=&#34;color: #FF0000&#34;&gt;HTTP_1_1&lt;/span&gt;, HttpResponseStatus.&lt;span style=&#34;color: #FF0000&#34;&gt;FORBIDDEN&lt;/span&gt;));
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code above is performed when the client initially connects to the tic-tac-toe server. The WebSocket specification defines how a &lt;em&gt;handshake&lt;/em&gt; needs to be performed. There are two versions of the handshake implemented above: one based on the old WebSocket specification (75), and the other based on the new version of the WebSocket specification (76). The biggest difference between the two handshake methods is the old version does not require a challenge while the new version does. To slightly complicate matters, different browsers implement different versions of the WebSocket specification. Another twist is that neither 75 or 76 is the latest version of the WebSocket specification, but these are the most commonly implemented by modern browsers. A deep dive into the WebSocket specification is beyond the scope of this article, but &lt;a href=&#34;http://www.whatwg.org/specs/web-socket-protocol/&#34; title=&#34;you can find the latest draft specification here&#34;&gt;you can find the latest draft specification here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This brings up an important point; the WebSocket specification is constantly evolving. Fast. I would strongly recommend exploring the option of using a higher-level framework for business programming rather than rolling your own server, because as you see above, you&amp;rsquo;ll need to keep up-to-date with the latest changes in the spec and which versions are supported by which browsers. It&amp;rsquo;s generally a good idea to leave this up to framework developers. That being said, even if you&amp;rsquo;re planning to use a high-level framework, getting an in-depth knowledge of Netty is a very good thing. Down the road if you need the kind of flexibility and power that Twitter does you&amp;rsquo;ll already know how to implement it.&lt;/p&gt;

&lt;p&gt;Also note that we&amp;rsquo;re programmatically changing the aggregator, encoder, and decoder for &lt;em&gt;this channel only&lt;/em&gt;. As soon as the handshake is successful we will be communicating with the client exclusively using the WebSocket protocol rather than HTTP. If we were to leave the original HTTP encoder, decoder, and aggregator alone, our server would not understand how to deal with a WebSocket packet; it would still be trying to piece together usable HTTP requests and responses.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s take a look at some tic-tac-toe specific logic. First we&amp;rsquo;ll need to create a game and assign players to it. As players connect to our server they&amp;rsquo;re paired off and assigned to a game. Our server will be able to support an infinite number of games simultaneously, although I doubt tic-tac-toe will ever become as popular as Twitter.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;void&lt;/span&gt; initGame(ChannelHandlerContext ctx) {
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Try to find a game waiting for a player. If one doesn&amp;#39;t exist, create a new one.&lt;/span&gt;
	Game game = findGame();
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Create a new instance of player and assign their channel for WebSocket communications.&lt;/span&gt;
	Player player = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; Player(ctx.&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;());
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Add the player to the game.&lt;/span&gt;
	Game.&lt;span style=&#34;color: #FF0000&#34;&gt;PlayerLetter&lt;/span&gt; letter = game.&lt;span style=&#34;color: #FF0000&#34;&gt;addPlayer&lt;/span&gt;(player);
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Add the game to the collection of games.&lt;/span&gt;
	games.&lt;span style=&#34;color: #FF0000&#34;&gt;put&lt;/span&gt;(game.&lt;span style=&#34;color: #FF0000&#34;&gt;getId&lt;/span&gt;(), game);
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Send confirmation message to player with game ID and their assigned letter (X or O)&lt;/span&gt;
	ctx.&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultWebSocketFrame(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; HandshakeMessageBean(game.&lt;span style=&#34;color: #FF0000&#34;&gt;getId&lt;/span&gt;(), letter.&lt;span style=&#34;color: #FF0000&#34;&gt;toString&lt;/span&gt;()).&lt;span style=&#34;color: #FF0000&#34;&gt;toJson&lt;/span&gt;()));
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// If the game has begun we need to inform the players. Send them a &amp;quot;turn&amp;quot; message (either &amp;quot;waiting&amp;quot; or &amp;quot;your_turn&amp;quot;)&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (game.&lt;span style=&#34;color: #FF0000&#34;&gt;getStatus&lt;/span&gt;() == Game.&lt;span style=&#34;color: #FF0000&#34;&gt;Status&lt;/span&gt;.&lt;span style=&#34;color: #FF0000&#34;&gt;IN_PROGRESS&lt;/span&gt;) {
	    game.&lt;span style=&#34;color: #FF0000&#34;&gt;getPlayer&lt;/span&gt;(PlayerLetter.&lt;span style=&#34;color: #FF0000&#34;&gt;X&lt;/span&gt;).&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultWebSocketFrame(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; TurnMessageBean(YOUR_TURN).&lt;span style=&#34;color: #FF0000&#34;&gt;toJson&lt;/span&gt;()));
	    game.&lt;span style=&#34;color: #FF0000&#34;&gt;getPlayer&lt;/span&gt;(PlayerLetter.&lt;span style=&#34;color: #FF0000&#34;&gt;O&lt;/span&gt;).&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultWebSocketFrame(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; TurnMessageBean(WAITING).&lt;span style=&#34;color: #FF0000&#34;&gt;toJson&lt;/span&gt;()));
	}
}

&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;private&lt;/span&gt; Game findGame() {
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Find an existing game and return it&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;for&lt;/span&gt; (Game g : games.&lt;span style=&#34;color: #FF0000&#34;&gt;values&lt;/span&gt;()) {
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (g.&lt;span style=&#34;color: #FF0000&#34;&gt;getStatus&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;equals&lt;/span&gt;(Game.&lt;span style=&#34;color: #FF0000&#34;&gt;Status&lt;/span&gt;.&lt;span style=&#34;color: #FF0000&#34;&gt;WAITING&lt;/span&gt;)) {
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;return&lt;/span&gt; g;
	    }
	}
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Or return a new game&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; Game();
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The code above is mainly responsible for creating and maintaining games, which are stored in the TicTacToeServerHandler as a static collection (shared across all instances of our handler). As players connect to our server we assign them to a game and let them know that they are either waiting for an opponent or that an opponent has connected and their game has begun. Exciting!&lt;/p&gt;

&lt;p&gt;Finally, we need to accept incoming WebSocket messages. Each message represents a player&amp;rsquo;s turn (which cell they selected). After we process the turn information we need to push data out to their opponent to let them know how badly they&amp;rsquo;re getting pwned. We also need to check the status of the ongoing game; it&amp;rsquo;s fairly important to be able to tell if a game has been won or tied after the last move!&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;void&lt;/span&gt; handleWebSocketFrame(ChannelHandlerContext ctx, WebSocketFrame frame) {
	Gson gson = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; Gson();
	IncomingMessageBean message = gson.&lt;span style=&#34;color: #FF0000&#34;&gt;fromJson&lt;/span&gt;(frame.&lt;span style=&#34;color: #FF0000&#34;&gt;getTextData&lt;/span&gt;(), IncomingMessageBean.&lt;span style=&#34;color: #FF0000&#34;&gt;class&lt;/span&gt;);
	Game game = games.&lt;span style=&#34;color: #FF0000&#34;&gt;get&lt;/span&gt;(message.&lt;span style=&#34;color: #FF0000&#34;&gt;getGameId&lt;/span&gt;());
	Player opponent = game.&lt;span style=&#34;color: #FF0000&#34;&gt;getOpponent&lt;/span&gt;(message.&lt;span style=&#34;color: #FF0000&#34;&gt;getPlayer&lt;/span&gt;());
	Player player = game.&lt;span style=&#34;color: #FF0000&#34;&gt;getPlayer&lt;/span&gt;(PlayerLetter.&lt;span style=&#34;color: #FF0000&#34;&gt;valueOf&lt;/span&gt;(message.&lt;span style=&#34;color: #FF0000&#34;&gt;getPlayer&lt;/span&gt;()));
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Mark the cell the player selected.&lt;/span&gt;
	game.&lt;span style=&#34;color: #FF0000&#34;&gt;markCell&lt;/span&gt;(message.&lt;span style=&#34;color: #FF0000&#34;&gt;getGridIdAsInt&lt;/span&gt;(), player.&lt;span style=&#34;color: #FF0000&#34;&gt;getLetter&lt;/span&gt;());
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Get the status for the current game.&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;boolean&lt;/span&gt; winner = game.&lt;span style=&#34;color: #FF0000&#34;&gt;isPlayerWinner&lt;/span&gt;(player.&lt;span style=&#34;color: #FF0000&#34;&gt;getLetter&lt;/span&gt;());
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;boolean&lt;/span&gt; tied = game.&lt;span style=&#34;color: #FF0000&#34;&gt;isTied&lt;/span&gt;();
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Respond to the opponent in order to update their screen.&lt;/span&gt;
	String responseToOpponent = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; OutgoingMessageBean(player.&lt;span style=&#34;color: #FF0000&#34;&gt;getLetter&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;toString&lt;/span&gt;(), message.&lt;span style=&#34;color: #FF0000&#34;&gt;getGridId&lt;/span&gt;(), winner, tied).&lt;span style=&#34;color: #FF0000&#34;&gt;toJson&lt;/span&gt;();
	opponent.&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultWebSocketFrame(responseToOpponent));
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Respond to the player to let them know they won.&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (winner) {
	    player.&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultWebSocketFrame(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; GameOverMessageBean(YOU_WIN).&lt;span style=&#34;color: #FF0000&#34;&gt;toJson&lt;/span&gt;()));
	} &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (tied) {
	    player.&lt;span style=&#34;color: #FF0000&#34;&gt;getChannel&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;write&lt;/span&gt;(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; DefaultWebSocketFrame(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; GameOverMessageBean(TIED).&lt;span style=&#34;color: #FF0000&#34;&gt;toJson&lt;/span&gt;()));
	}
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Remember earlier that handleWebSocketFrame is one of our own methods, not a callback method provided by Netty. This method is invoked when we inspect the incoming message and determine it&amp;rsquo;s a WebSocketFrame rather than an HttpRequest. The core of the logic above deals with updating the &lt;em&gt;game board&lt;/em&gt; and marking the current player&amp;rsquo;s last move. We also need to check for victory or draw conditions and update the player and opponent with the latest game status.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s it! We&amp;rsquo;ve coded an entire tic-tac-toe server from scratch and it was very painless. Netty &lt;strong&gt;rocks&lt;/strong&gt;. The only classes we didn&amp;rsquo;t review are the specific POJOs for tic-tac-toe related logic. You can check out the source below:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rocketpages/Netty-TicTacToe-Server/blob/master/src/main/java/com/tictactoe/game/Board.java&#34; title=&#34;Board.java&#34;&gt;Board.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rocketpages/Netty-TicTacToe-Server/blob/master/src/main/java/com/tictactoe/game/Game.java&#34; title=&#34;Game.java&#34;&gt;Game.java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/rocketpages/Netty-TicTacToe-Server/blob/master/src/main/java/com/tictactoe/game/Player.java&#34; title=&#34;Player.java&#34;&gt;Player.java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;creating-the-tic-tac-toe-client-using-jquery&#34;&gt;Creating the tic-tac-toe client using jQuery&lt;/h3&gt;

&lt;p&gt;Building our tic-tac-toe server was fairly simple. Building our tic-tac-toe client is even easier thanks to the power of jQuery. If you&amp;rsquo;d like to skip straight to the source code, it can be viewed below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/rocketpages/TicTacToe-Client&#34; title=&#34;https://github.com/rocketpages/TicTacToe-Client&#34;&gt;https://github.com/rocketpages/TicTacToe-Client&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The bulk of the logic is contained in our JavaScript file. After the initial handshake is performed, all communication with the server will be done asynchronously via the WebSocket API. Please note that not all browsers support the WebSocket protocol. This is an &lt;a href=&#34;http://en.wikipedia.org/wiki/Comparison_of_layout_engines_%28HTML_5%29#Related_specifications&#34; title=&#34;up-to-date list&#34;&gt;up-to-date list&lt;/a&gt; of which layout engines support which HTML5 features.&lt;/p&gt;

&lt;p&gt;Below is a copy of the JavaScript for the tic-tac-toe client.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Constants - Status Updates&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; STRATEGIZING_STATUS = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;Your opponent is strategizing.&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; WAITING_STATUS = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;Waiting for an opponent.&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; YOUR_TURN_STATUS = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;It&amp;#39;s your turn!&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; YOU_WIN_STATUS = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;You win!&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; TIED_STATUS = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;The game is tied.&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; WEBSOCKET_CLOSED_STATUS = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;The WebSocket Connection Has Been Closed.&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Constants - Game&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; PLAYER_O = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;O&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; PLAYER_X = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;X&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Constants - Incoming message types&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_HANDSHAKE = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;handshake&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_OPPONENT_UPDATE = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;response&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_TURN_INDICATOR = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;turn&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_GAME_OVER = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;game_over&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Constants - Message turn indicator types&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_TURN_INDICATOR_YOUR_TURN = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;YOUR_TURN&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_TURN_INDICATOR_WAITING = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;WAITING&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Constants - Game over message types&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_GAME_OVER_YOU_WIN = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;YOU_WIN&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; MESSAGE_GAME_OVER_TIED = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;TIED&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Constants - WebSocket URL&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; WEBSOCKET_URL = &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;ws://localhost:9000/websocket&amp;quot;&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Variables&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; player;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; opponent;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; gameId;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; yourTurn = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;false&lt;/span&gt;;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// WebSocket connection&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; ws;
$(document).ready(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt;() {
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;/* Bind to the click of all divs (tic tac toe cells) on the page&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;	We would want to qualify this if we styled the game fancier! */&lt;/span&gt;
	$(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;).click(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Only process clicks if it&amp;#39;s your turn.&lt;/span&gt;
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (yourTurn == &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;) {
	        &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Stop processing clicks and invoke sendMessage().&lt;/span&gt;
	        yourTurn = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;false&lt;/span&gt;;
	        sendMessage(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;this&lt;/span&gt;.id);
	        &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Add the X or O to the game board and update status.&lt;/span&gt;
	        $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; + &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;this&lt;/span&gt;.id).addClass(player);
	        $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; + &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;this&lt;/span&gt;.id).html(player);
	        $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(STRATEGIZING_STATUS);
	    }
	});
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// On the intial page load we perform the handshake with the server.&lt;/span&gt;
	ws = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; WebSocket(WEBSOCKET_URL);
	ws.onopen = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt;(event) {
	    $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(WAITING_STATUS);
	}
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Process turn message (&amp;quot;push&amp;quot;) from the server.&lt;/span&gt;
	ws.onmessage = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt;(event) {
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; message = jQuery.parseJSON(event.data);
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Process the handshake response when the page is opened&lt;/span&gt;
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.type === MESSAGE_HANDSHAKE) {
	        gameId = message.gameId;
	        player = message.player;
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (player === PLAYER_X) {
	            opponent = PLAYER_O;
	        } &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; {
	            opponent = PLAYER_X;
	        }
	    }
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Process your opponent&amp;#39;s turn data.&lt;/span&gt;
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.type === MESSAGE_OPPONENT_UPDATE) {
	        &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Show their turn info on the game board.&lt;/span&gt;
	        $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; + message.gridId).addClass(message.opponent);
	        $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; + message.gridId).html(message.opponent);
	        &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Switch to your turn.&lt;/span&gt;
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.winner == &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;) {
	            $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(message.opponent + &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot; is the winner!&amp;quot;&lt;/span&gt;);
	        } &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.tied == &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;) {
	            $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(TIED_STATUS);
	        } &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; {
	            yourTurn = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;;
	            $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(YOUR_TURN_STATUS);
	        }
	    }
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;/* The initial turn indicator from the server. Determines who starts&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;	    the game first. Both players wait until the server gives the OK&lt;/span&gt;
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;	    to start a game. */&lt;/span&gt;
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.type === MESSAGE_TURN_INDICATOR) {
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.turn === MESSAGE_TURN_INDICATOR_YOUR_TURN) {
	            yourTurn = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;;
	            $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(YOUR_TURN_STATUS);
	        } &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.turn === MESSAGE_TURN_INDICATOR_WAITING) {
	            $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(STRATEGIZING_STATUS);
	        }
	    }
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;/* The server has determined you are the winner and sent you this message. */&lt;/span&gt;
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.type === MESSAGE_GAME_OVER) {
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.result === MESSAGE_GAME_OVER_YOU_WIN) {
	            $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(YOU_WIN_STATUS);
	        }
	        &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (message.result === MESSAGE_GAME_OVER_TIED) {
	            $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(TIED_STATUS);
	        }
	    }
	}
	ws.onclose = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt;(event) {
	    $(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;#status&amp;#39;&lt;/span&gt;).text(WEBSOCKET_CLOSED_STATUS);
	}
});
&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// Send your turn information to the server.&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt; sendMessage(id) {
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; message = {gameId: gameId, player: player, gridId:id};
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;var&lt;/span&gt; encoded = $.toJSON(message);
	ws.send(encoded);
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The bulk of the logic above deals with two distinct activities; maintaining state and processing messages. You&amp;rsquo;ll notice that when the page first loads we&amp;rsquo;ll use the documentReady function to initiate the WS handshake. You&amp;rsquo;ll also notice that we use jQuery to bind different WebSocket events to code blocks.&lt;/p&gt;

&lt;p&gt;jQuery makes it fairly trivial to communicate with a WS server. Rather than polling the server, the WebSocket API allows us to bind logic to the &lt;code&gt;onmessage&lt;/code&gt; event and perform the appropriate logic. This is awesome! Our tic-tac-toe game is a simple webpage that never needs refreshing. We also don&amp;rsquo;t need to waist IO constantly polling the server. As soon as our opponent makes his or her move, our screen is immediately updated and we get to take our turn.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s a very high level look at the power of Java, Netty, the WebSocket API, and jQuery. We can make a number of improvements to this game, such as tracking and displaying ongoing stats (win, loss, draw) and even allowing the same player to compete in &lt;em&gt;multiple games of tic-tac-toe at once!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Using these technologies we may actually be able to make tic-tac-toe a challenge.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing Fancybox with AJAX (and Wicket)</title>
      <link>http://rocketpages.github.io/fixing-fancybox-with-ajax-and-wicket</link>
      <pubDate>Tue, 28 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/fixing-fancybox-with-ajax-and-wicket</guid>
      <description>&lt;p&gt;A personal project I&amp;rsquo;m working on uses the jQuery &lt;a href=&#34;http://fancybox.net&#34; title=&#34;Fancybox&#34;&gt;Fancybox&lt;/a&gt; library to display images. It&amp;rsquo;s a great lightbox, except for one small problem: AJAX refreshes break it.&lt;/p&gt;

&lt;p&gt;A page I&amp;rsquo;m working on accepts multiple image uploads. Once the images are successfully processed asynchronously on the server, an image panel on the same page is automatically refreshed. The AJAX callback works fine and updates the panel view with the newly uploaded photos, but the net result is that Fancybox stops working completely.&lt;/p&gt;

&lt;p&gt;The solution is pretty simple: Fancybox needs to be re-initialized after the view is refreshed. This involves invoking a JavaScript function &lt;em&gt;after&lt;/em&gt; the AJAX callback completes. Fortunately, I&amp;rsquo;m using Wicket, which makes invoking JavaScript after the callback a breeze.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s the (condensed version of) code for my behavior class that handles the repainting, callback, and post-callback JS invocation:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;final&lt;/span&gt; IBehavior repaintBehavior = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; AbstractDefaultAjaxBehavior() {
	@Override
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;void&lt;/span&gt; respond(AjaxRequestTarget target)
	{
	    ThingModel thingModel = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; ThingModel(thingId);
	    UnprocessedPhotosModel photosModel = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;new&lt;/span&gt; UnprocessedPhotosModel(getCurrentUser().&lt;span style=&#34;color: #FF0000&#34;&gt;getId&lt;/span&gt;(), tokenId);
	    List photos = photosModel.&lt;span style=&#34;color: #FF0000&#34;&gt;getObject&lt;/span&gt;();
	
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;for&lt;/span&gt; (Photo photo : photos)
	    {
	        photo.&lt;span style=&#34;color: #FF0000&#34;&gt;setThing&lt;/span&gt;(thingModel.&lt;span style=&#34;color: #FF0000&#34;&gt;getObject&lt;/span&gt;());
	        ServiceFactory.&lt;span style=&#34;color: #FF0000&#34;&gt;getPhotoService&lt;/span&gt;().&lt;span style=&#34;color: #FF0000&#34;&gt;savePhoto&lt;/span&gt;(photo);
	    }
	
	    target.&lt;span style=&#34;color: #FF0000&#34;&gt;addComponent&lt;/span&gt;(photosPanel);
	    target.&lt;span style=&#34;color: #FF0000&#34;&gt;appendJavascript&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;$.fancyboxResetBusy(); reinitFancybox();&amp;quot;&lt;/span&gt;);
	}
	
	@Override
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;void&lt;/span&gt; renderHead(IHeaderResponse response)
	{
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;super&lt;/span&gt;.&lt;span style=&#34;color: #FF0000&#34;&gt;renderHead&lt;/span&gt;(response);
	    CharSequence callback = getCallbackScript();
	    response.&lt;span style=&#34;color: #FF0000&#34;&gt;renderJavascript&lt;/span&gt;(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;function uploadCompleted() { &amp;quot;&lt;/span&gt; + callback + &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;customUploadCompleted&amp;quot;&lt;/span&gt;);
	}
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For those who aren&amp;rsquo;t familiar with Wicket, the &lt;strong&gt;renderHead&lt;/strong&gt; method is rendering a custom JavaScript function in the view. The multiple upload Flash component I use invokes the rendered JS function after it finishes processing the images. When the Flash uploader invokes &lt;strong&gt;uploadCompleted&lt;/strong&gt;, Wicket handles all the AJAX plumbing and executes the Java code in the &lt;strong&gt;respond&lt;/strong&gt; method above.&lt;/p&gt;

&lt;p&gt;The two most important lines of code are the calls to &lt;em&gt;target&lt;/em&gt;. &lt;em&gt;target.addComponent&lt;/em&gt; instructs Wicket to refresh the photo panel, and &lt;em&gt;target.appendJavascript&lt;/em&gt; instructs Wicket to invoke the functions in the String parameter after the panel is refreshed.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the &lt;strong&gt;reinitFancybox&lt;/strong&gt; function which gets invoked after the panel is refreshed.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt; reinitFancybox() {  
    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// CSS&lt;/span&gt;
	$(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;.gallery img, portfolio.list img, .portfolio.grid-2 div img, a.fancy, ul.screens img&amp;quot;&lt;/span&gt;).css(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;opacity&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);
	
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// ON MOUSE OVER&lt;/span&gt;
	$(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;.gallery img, .portfolio-list img, .portfolio.grid-2 div img, a.fancy, ul.screens img&amp;quot;&lt;/span&gt;).hover(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// SET OPACITY TO 100%&lt;/span&gt;
	    $(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;this&lt;/span&gt;).stop().animate({opacity: &lt;span style=&#34;color: #0000FF&#34;&gt;0.5&lt;/span&gt;}, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;fast&amp;quot;&lt;/span&gt;);
	},
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// ON MOUSE OUT&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt; () {
	    &lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// SET OPACITY BACK TO 100%&lt;/span&gt;
	    $(&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;this&lt;/span&gt;).stop().animate({opacity: &lt;span style=&#34;color: #0000FF&#34;&gt;1&lt;/span&gt;}, &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;fast&amp;quot;&lt;/span&gt;);
	});
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// INIT FANCYBOX&lt;/span&gt;
	$(&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;li.image a, a.fancy, .portfolio.grid li a.folio-zoom, .portfolio-list.image a&amp;quot;&lt;/span&gt;).fancybox({
	    &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;titlePosition&amp;#39;&lt;/span&gt;     : &lt;span style=&#34;color: #0000FF&#34;&gt;&amp;#39;over&amp;#39;&lt;/span&gt;
	});
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Most of the code above re-initializes the CSS hover effects I use to pretty up my image panel. The last piece is responsible for re-initializing Fancybox itself. &lt;em&gt;At this point, we should be done, Fancybox should work perfectly again.&lt;/em&gt; But there&amp;rsquo;s a small catch, the Fancybox script includes a global variable named &lt;strong&gt;busy&lt;/strong&gt; which is set to &lt;em&gt;true &lt;/em&gt;at the beginning of almost every single function. If for any reason the script is interrupted before busy is set back to &lt;em&gt;false, &lt;/em&gt;re-initialization will always abort. Here&amp;rsquo;s a snippet of the Fancybox code below:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$.fancybox = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt;(obj) {
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;if&lt;/span&gt; (busy) {
	    &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;return&lt;/span&gt;;
	}
	
	busy = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;true&lt;/span&gt;;
	
	&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;// ...&lt;/span&gt;
};
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It&amp;rsquo;s pretty obvious that if busy is &lt;em&gt;true&lt;/em&gt; Fancybox won&amp;rsquo;t initialize. We need to make sure busy is set to false before attempting to re-initialize. Unfortunately, this requires a small &lt;span style=&#34;text-decoration: line-through;&#34;&gt;kludge&lt;/span&gt; addition to the Fancybox script itself. I&amp;rsquo;ve added the following public function:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$.fancyboxResetBusy = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;function&lt;/span&gt;() {
	busy = &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;false&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Invoking this before the initialize function ensures the initialization doesn&amp;rsquo;t return prematurely.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Connection pooling with Hibernate 3.3.x and C3P0</title>
      <link>http://rocketpages.github.io/connection-pooling-with-hibernate-3-3-x-and-c3p0</link>
      <pubDate>Sun, 26 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/connection-pooling-with-hibernate-3-3-x-and-c3p0</guid>
      <description>

&lt;p&gt;Hibernate uses it&amp;rsquo;s own built-in connection pool out of the box. There are some pretty heavy duty sites running with the default connection pool enabled in production despite the obvious warning against doing this.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;INFO DriverManagerConnectionProvider:64 - Using Hibernate built-in connection pool (not &lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;for&lt;/span&gt; production use!)
INFO DriverManagerConnectionProvider:65 - Hibernate connection pool size: 1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A few minor problems creep up with this default configuration left alone, such as the inability for Hibernate to reconnect closed connections. MySQL closes unused connections after 8 hours by default, which causes problems for low-volume applications that may not experience any database usage overnight.&lt;/p&gt;

&lt;p&gt;One solution is to use &lt;a href=&#34;http://www.mchange.com/projects/c3p0/index.html&#34; title=&#34;C3P0&#34;&gt;C3P0&lt;/a&gt;, an incredibly simple library that augments the standard JDBC drivers essentially making them &amp;ldquo;enterprise-ready&amp;rdquo;. One of the main features of C3P0 is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Transparent pooling of Connection and PreparedStatements behind DataSources which can &amp;ldquo;wrap&amp;rdquo; around traditional drivers or arbitrary unpooled DataSources.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, you don&amp;rsquo;t have to change any of your code to use C3P0 connection pools if you&amp;rsquo;re using Hibernate. C3P0 takes care of maintaining the pool and testing connections, so your code stays in tact.&lt;/p&gt;

&lt;h2 id=&#34;configuring-c3p0&#34;&gt;Configuring C3P0&lt;/h2&gt;

&lt;p&gt;Add the C3P0 jar to your classpath. If you&amp;rsquo;re using Maven, simply add the following to your pom.xml file:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.hibernate&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;hibernate-c3p0&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
	&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.3.2.GA&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Make the following changes to your hibernate.cfg.xml file. Pay special attention to the &lt;em&gt;provider_class&lt;/em&gt; property. Previous versions did not require this property, so most of the tutorials on the net are missing this key piece of info.&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;connection.url&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;jdbc:mysql://127.0.0.1/your_db&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;connection.username&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;your_username&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;connection.driver_class&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;com.mysql.jdbc.Driver&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;dialect&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;org.hibernate.dialect.MySQLDialect&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;hibernate.connection.provider_class&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;org.hibernate.connection.C3P0ConnectionProvider&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;

&lt;span style=&#34;color: #008800; font-style: italic&#34;&gt;&amp;lt;!-- JDBC connection pool (C3P0) --&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;c3p0.min_size&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;5&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;c3p0.max_size&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;20&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;c3p0.timeout&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;1800&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #FF0000&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #0000FF&#34;&gt;&amp;quot;c3p0.max_statements&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;50&lt;span style=&#34;color: #000080; font-weight: bold&#34;&gt;&amp;lt;/property&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In order to configure C3P0 for your specific needs, you&amp;rsquo;ll need a &lt;em&gt;c3p0.properties&lt;/em&gt; file on the classpath. Take a look &lt;a href=&#34;http://www.mchange.com/projects/c3p0/index.html#configuration_files&#34; title=&#34;here&#34;&gt;here&lt;/a&gt; for all the available settings you can tweak. Here&amp;rsquo;s an example that ensures any closed connection is tested and re-opened rather than MySQL throwing an exception:&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #FF0000&#34;&gt;c3p0.testConnectionOnCheckout&lt;/span&gt;=&lt;span style=&#34;color: #0000FF&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;verifying-it-worked&#34;&gt;Verifying it worked&lt;/h2&gt;

&lt;p&gt;Configuring C3P0 is pretty simple! If everything works correctly, you&amp;rsquo;ll see the following in your logs:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #ffffff&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;INFO ConnectionProviderFactory:95 - Initializing connection provider: org.hibernate.connection.C3P0ConnectionProvider
INFO C3P0ConnectionProvider:103 - C3P0 using driver: com.mysql.jdbc.Driver at URL: jdbc:mysql://127.0.0.1/your_db
INFO C3P0ConnectionProvider:104 - Connection properties: {user=****, password=****}
&lt;/pre&gt;&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Beyond Java</title>
      <link>http://rocketpages.github.io/beyond-java</link>
      <pubDate>Mon, 13 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/beyond-java</guid>
      <description>

&lt;p&gt;A recent post by Mike Gualtieri of Forrester caught my attention. Mike strongly asserts that &lt;a href=&#34;http://blogs.forrester.com/mike_gualtieri/10-11-23-java_is_a_dead_end_for_enterprise_app_development&#34; title=&#34;Java is a dead end for enterprises&#34;&gt;Java is a dead end for enterprises&lt;/a&gt; and business software should be built with something else. Mike mentions a few different options, but mainly promotes 4GL tools such as Powerbuilder and “all in one” business infrastructure software such as &lt;a href=&#34;http://www.softwareag.com/corporate/products/az/webmethods/default.asp&#34; title=&#34;SoftwareAG webMethods&#34;&gt;SoftwareAG webMethods&lt;/a&gt;. He also touches on BPM and event processing, and by event processing I&amp;rsquo;m pretty sure he means CEP tools such as &lt;a href=&#34;http://www.espertech.com/products/esper.php&#34; title=&#34;Esper&#34;&gt;Esper&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve worked with Java for 10 years. I&amp;rsquo;ve also worked briefly with FoxPro. I recently spent a few months at a client site digging through SAS code that&amp;rsquo;s being migrated to Java. I spent almost a month on a SoftwareAG training course to learn the &amp;ldquo;webMethods way&amp;rdquo; of doing things. I&amp;rsquo;ve seen 4GLs in action and I&amp;rsquo;ve seen Java in action.&lt;/p&gt;

&lt;p&gt;Is Mike really advocating the use of proprietary, niche languages such as &lt;a href=&#34;http://en.wikipedia.org/wiki/WebMethods_Flow&#34; title=&#34;webMethods Flow&#34;&gt;webMethods Flow&lt;/a&gt; over Java? I&amp;rsquo;m not an analyst at Forrester, but I&amp;rsquo;ve been turning Powerpoint slides into functioning software for long enough that I feel just about qualified enough to chime in on the subject.&lt;/p&gt;

&lt;p&gt;I agree with the spirit of Mike&amp;rsquo;s post. Java can be a real pain to build typical business software with. The problem isn&amp;rsquo;t Java itself, the problem is that businesses use it for &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id=&#34;4gls-and-dead-ends&#34;&gt;4GLs and dead-ends&lt;/h2&gt;

&lt;p&gt;People have tried for decades to move away from third-generation languages like Java and towards the nirvana of business folks creating their own apps with some kind of flow-charting tool. One of the first guys I worked with - he had punch cards in his drawer that &lt;em&gt;he&lt;/em&gt; punched - told me all about it. It&amp;rsquo;s the longest running punch line in IT. Mike&amp;rsquo;s post may have been titled &amp;ldquo;Java is a dead end&amp;rdquo;, but it really should have been titled &amp;ldquo;third-generation languages are a dead end&amp;rdquo;. And the date of the article could easily have been 1980 or 1990. The dead end is not third-generation languages; languages are merely a tool.&lt;/p&gt;

&lt;p&gt;The dead end is producing horrible software and expecting to keep up with the rest of the world.&lt;/p&gt;

&lt;p&gt;The dead end is promoting a stock trader or pony salesman or MBA-type to head up your IT department just because he or she really knows their way around office politics.&lt;/p&gt;

&lt;p&gt;The dead end is misusing a language or technology for years and &lt;em&gt;blaming the technology&lt;/em&gt; and &lt;em&gt;blaming your developers&lt;/em&gt; rather than hiring the right people to come up with your strategy and &lt;em&gt;empowering&lt;/em&gt; your developers.&lt;/p&gt;

&lt;p&gt;Leaders create leaders.&lt;/p&gt;

&lt;p&gt;The only reason these strategies worked in the past is because &lt;strong&gt;everyone&lt;/strong&gt; was producing garbage software, but nothing lasts forever.&lt;/p&gt;

&lt;h2 id=&#34;staying-competitive&#34;&gt;Staying competitive&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a hands-on developer&amp;rsquo;s opinion on the whole “Java is dead” debate.&lt;/p&gt;

&lt;p&gt;Java is no more of a dead end than C, C++, or MATLAB. They all have their uses, but using Java for everything is just as poor of a strategy as trying to use MATLAB for everything.&lt;/p&gt;

&lt;p&gt;If you want to build great software, you need to hire great software developers. There&amp;rsquo;s no magic tool that will allow your business folks to put together fantastic software all by themselves. These ideas look fantastic in a Powerpoint slide or Forrester report, but fall flat in the real world.&lt;/p&gt;

&lt;h3 id=&#34;how-do-you-hire-great-software-developers&#34;&gt;How do you hire great software developers?&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Understand what&amp;rsquo;s important to top-tier developers. Here&amp;rsquo;s a &lt;a href=&#34;http://www.joelonsoftware.com/articles/fog0000000043.html&#34; title=&#34;good place to start&#34;&gt;good place to start&lt;/a&gt;. This was written 10 years ago and most companies aren&amp;rsquo;t even close to a perfect score.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Treat software development as a first-class citizen of your business if you&amp;rsquo;re going to bother building software. Otherwise, stop &lt;em&gt;building&lt;/em&gt; and start &lt;em&gt;buying&lt;/em&gt;; find a trusted partner to build for you. There&amp;rsquo;s nothing wrong with leaning on third-party firms to focus on the technology while you focus on your core business.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;If you&amp;rsquo;ve got a department writing software that operates like anything other than a &lt;em&gt;software&lt;/em&gt; business, you&amp;rsquo;ve got a bunch of problems that no tool in the world will ever fix. There&amp;rsquo;s nothing worse in the world than software decisions made by companies who treat software as a necessary evil rather than a driver of growth.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Stop putting stock traders and accountants and lawyers in charge of your IT department. They may be smart folks, and that kind of strategy may work in politics, but it&amp;rsquo;s painful to watch the decisions these people make day in and day out. Decisions like outsourcing a project to India with almost no oversight and wondering why it looks like a box of pudding when it finally gets delivered. Or having a budget of $100mm and not bothering to hire UX and UI professionals.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Developers need to speak up, while keeping in mind the limitations of the process and cultural limitations of large enterprise environments. I&amp;rsquo;ve seen projects go completely off the rails because developers allow corporate inertia to dictate decisions rather than technical merits. I&amp;rsquo;ve also seen money saved because someone asks the question, &amp;ldquo;Why are we building a custom app when we can buy it off the shelf?&amp;rdquo;&lt;/p&gt;

&lt;p&gt;Java is long in the tooth, absolutely, but there&amp;rsquo;s still so much goodness in the Java world: GWT, Wicket, Guice, and on and on. Talented programmers can create beautiful things with these tools.&lt;/p&gt;

&lt;p&gt;Or if you think I&amp;rsquo;m wrong, you can develop your next app using 4GLs like SAS, FoxPro, and webMethods.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The future of Java in the enterprise</title>
      <link>http://rocketpages.github.io/the-future-of-java-in-the-enterprise</link>
      <pubDate>Mon, 15 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://rocketpages.github.io/the-future-of-java-in-the-enterprise</guid>
      <description>&lt;p&gt;It’s been a busy few years in the Java world. Oracle’s acquisition of Sun is obviously the largest piece of news and has a significant impact on the future of Java. Oracle’s new position as owner and commander-in-chief now places Java squarely in the enterprise realm alongside Oracle’s other products. Java has always been an enterprise technology, but &lt;a href=&#34;http://gee.cs.oswego.edu/dl/html/jcp22oct10.html&#34; title=&#34;without the JCP promoting collaborative innovation&#34;&gt;without the JCP promoting collaborative innovation&lt;/a&gt;, who knows what kind of traction Java would have made in the world? Appealing to both academia and industry helped push Java forward and attract a lot of new blood in the early years.&lt;/p&gt;

&lt;p&gt;Fast forward to 2010.&lt;/p&gt;

&lt;p&gt;Java is a utilitarian, status-quo ecosystem for getting things done, albeit not very quickly. This is actually a good thing. Instead of worrying about sharp edges, developers get to work with a very stable, very slow moving target. This won&amp;rsquo;t change as Oracle&amp;rsquo;s only motivation is to sell support licenses and create other fee-based streams of revenue. Major improvements to Java are not on the agenda. Innovation from the core Java team will almost certainly slow down and Java will move deeper into a stabilization and maturity phase. Anything considered an official spec is almost certainly going to see a reduced adoption rate as only the largest of the large corporations stick with pure Java standards.&lt;/p&gt;

&lt;p&gt;As business goes on as usual, everyone is anxiously waiting for a true Java successor to emerge. Will it be Scala? Go? Neither are yet on the radar of most corporate cubicle farms.&lt;/p&gt;

&lt;p&gt;Contrary to the belief of Java-contrarians, Java will not die any time soon, nor should it. Java is well suited to organizations that span many silos with many integration points as Java integrates so well with other technologies. The language itself is also well suited to large development teams; not only does it have a massive library of utilities available to Java developers, but its statically typed nature makes refactoring relatively easy.&lt;/p&gt;

&lt;p&gt;In my opinion Java will actually experience a period of growth as IT spending increases with the (slowly) rebounding economy. Even if the economy takes another nosedive, organizations realize that mass cost savings can be realized through superior technology, and Java&amp;rsquo;s place as a mature and stable language position it as a reasonable choice for a risk-adverse economic climate. Maturity and stability, not innovation, is what the enterprise values most. (I would wager that there are many more lines of COBOL currently in production than lines of Ruby.) Even though Java is mature, most corporations haven’t leveraged even a fraction of what Java is capable of. The problem in many shops isn’t even the language itself; a powerful shiny new language won’t fix the process problems that plague most corporate development shops, a powerful shiny new language would most likely just exacerbate them. Java on Android is also a big deal for Java developers considering that Android recently surpassed iOS in terms of mobile OS market share. Unless Google declares war on Java, the trend is growth.&lt;/p&gt;

&lt;p&gt;Over the next decade expect mainframe systems to slowly be retired and legacy Java applications be refactored into client-centric enterprise portals. The simple fact is that Java as an ecosystem (language + tools + frameworks + runtime environment) is a fantastic choice for system integration projects and some new development in large organizations. Java is rock-solid and proven.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>